## add extra space to right margin of plot within frame
par(mar=c(5, 4, 4, 6) + 0.1)
## Plot first set of data and draw its axis
plot(time, newTest, axes=FALSE, ylim=c(0,4000), xlab="", ylab="",  panel.first = grid(),
type="l",col="blue", main="Yeni Test Sayısı ve Yeni Vaka Tespit Oranı", lwd = 2)
axis(2, ylim=c(0,4000),col="blue",col.axis="blue", las=1)  ## las=1 makes horizontal labels
mtext("Yeni Test Sayısı",col="blue",side=2,line=3)
box()
## Allow a second plot on the same graph
par(new=TRUE)
## Plot the second plot and put axis scale on right
plot(time, newCaseRatio,  xlab="", ylab="", ylim=c(0,20),
axes=FALSE, type="l", col="red", panel.first = grid(), lwd=2)
## a little farther out (line=4) to make room for labels
mtext("Yeni Vaka Tespit Etme Oranı (%)",side=4,col="red",line=2.5)
axis(4, ylim=c(0,20), col="red",col.axis="red",las=2)
## Draw the time axis
axis(1,pretty(range(time),15))
mtext("Gün",side=1,col="black",line=2.5)
setwd("~/Documents/GitHub/Covid2019Turkey/")
data <- read.table("www/data/covid_cases.txt", header = TRUE, sep = "\t", )
head(data)
colnames(data) = c("Tarih", "Toplam Vaka", "Yeni Vaka", "Toplam Ölüm", "Yeni Ölüm","Değişim (%)", "Toplam Test", "Yeni Test", "Yeni Vaka Tespit Etme Oranı (%)", "Time")
time <- data$Time
newTest <- data$`Yeni Test`
newCaseRatio <- data$`Yeni Vaka Tespit Etme Oranı (%)`
par(mar=c(5, 4, 4, 6) + 0.1)
plot(time, newTest, axes=FALSE, ylim=c(0,4000), xlab="", ylab="",  panel.first = grid(),
type="l",col="blue", main="Yeni Test Sayısı ve Yeni Vaka Tespit Oranı", lwd = 2)
axis(2, ylim=c(0,4000),col="blue",col.axis="blue", las=1)  ## las=1 makes horizontal labels
mtext("Yeni Test Sayısı",col="blue",side=2,line=3)
box()
par(new=TRUE)
plot(time, newCaseRatio,  xlab="", ylab="", ylim=c(0,20),
axes=FALSE, type="l", col="red", panel.first = grid(), lwd=2)
mtext("Yeni Vaka Tespit Etme Oranı (%)",side=4,col="red",line=2.5)
axis(4, ylim=c(0,20), col="red",col.axis="red",las=2)
axis(1,pretty(range(time),15))
mtext("Gün",side=1,col="black",line=2.5)
legend(0,20,legend=c("Test","Oran (%)"),
text.col=c("blue","red"),lty = 1, box.lty = c(1,1), col=c("blue","red"), seg.len = 0.5)
setwd("~/Documents/GitHub/Covid2019Turkey/")
data <- read.table("www/data/covid_cases.txt", header = TRUE, sep = "\t", )
head(data)
colnames(data) = c("Tarih", "Toplam Vaka", "Yeni Vaka", "Toplam Ölüm", "Yeni Ölüm","Değişim (%)", "Toplam Test", "Yeni Test", "Yeni Vaka Tespit Etme Oranı (%)", "Time")
time <- data$Time
newTest <- data$`Yeni Test`
newCaseRatio <- data$`Yeni Vaka Tespit Etme Oranı (%)`
par(mar=c(5, 4, 4, 6) + 0.1)
plot(time, newTest, axes=FALSE, ylim=c(0,4000), xlab="", ylab="",  panel.first = grid(),
type="l",col="blue", main="Yeni Test Sayısı ve Yeni Vaka Tespit Oranı", lwd = 2)
axis(2, ylim=c(0,4000),col="blue",col.axis="blue", las=1)  ## las=1 makes horizontal labels
mtext("Yeni Test Sayısı",col="blue",side=2,line=3)
box()
par(new=TRUE)
plot(time, newCaseRatio,  xlab="", ylab="", ylim=c(0,20),
axes=FALSE, type="l", col="red", panel.first = grid(), lwd=2)
mtext("Yeni Vaka Tespit Etme Oranı (%)",side=4,col="red",line=2.5)
axis(4, ylim=c(0,20), col="red",col.axis="red",las=2)
axis(1,pretty(range(time),15))
mtext("Gün",side=1,col="black",line=2.5)
runApp()
runApp()
newTest
ylimit2 = max(newCaseRatio)
ylimit2
ylimit2 = max(newCaseRatio, na.rm = TRUE)
ylimit2
time
setwd("~/Documents/GitHub/Covid2019Turkey/")
data <- read.table("www/data/covid_cases.txt", header = TRUE, sep = "\t", )
head(data)
colnames(data) = c("Tarih", "Toplam Vaka", "Yeni Vaka", "Toplam Ölüm", "Yeni Ölüm","Değişim (%)", "Toplam Test", "Yeni Test", "Yeni Vaka Tespit Etme Oranı (%)", "Time")
time <- data$Time
newTest <- data$`Yeni Test`
newCaseRatio <- data$`Yeni Vaka Tespit Etme Oranı (%)`
par(mar=c(5, 4, 4, 6) + 0.1)
ylimit = max(newTest, na.rm = TRUE)
plot(time, newTest, axes=FALSE, ylim=c(0,ylimit), xlab="", ylab="",  panel.first = grid(),
type="l",col="blue", main="Yeni Test Sayısı ve Yeni Vaka Tespit Oranı", lwd = 2)
axis(2, ylim=c(0,ylimit),col="blue",col.axis="blue", las=1)  ## las=1 makes horizontal labels
mtext("Yeni Test Sayısı",col="blue",side=2,line=3)
box()
par(new=TRUE)
ylimit2 = max(newCaseRatio, na.rm = TRUE)
plot(time, newCaseRatio,  xlab="", ylab="", ylim=c(0,ylimit2),
axes=FALSE, type="l", col="red", panel.first = grid(), lwd=2)
mtext("Yeni Vaka Tespit Etme Oranı (%)",side=4,col="red",line=2.5)
axis(4, ylim=c(0,ylimit2), col="red",col.axis="red",las=2)
axis(1,pretty(range(time),length(time)))
mtext("Gün",side=1,col="black",line=2.5)
runApp()
rsconnect::deployApp()
runApp()
rsconnect::deployApp()
setwd("~/Documents/GitHub/Covid2019Turkey/")
data <- read.table("www/data/covid_cases.txt", header = TRUE, sep = "\t", )
url = "https://raw.githubusercontent.com/datasets/covid-19/master/data/time-series-19-covid-combined.csv"
dataWorld = read.csv(url)
head(dataWorld)
dataWorld$Province.State = as.character(dataWorld$Province.State)
dataWorld$Province.State = noquote(dataWorld$Province.State)
head(dataWorld)
splitDataWorld = split(dataWorld, dataWorld$Country.Region)
countryNanmes = names(splitDataWorld)
newWorldData = list()
for(i in 1:length(countryNanmes)){
print(i)
c = countryNanmes[i]
d = nrow(splitDataWorld[[c]])
pData = splitDataWorld[[c]]
pData$MaxConfirmed = max(pData$Confirmed)
if(length(pData$Province.State) > length(unique(dataWorld$Date))){
orderedData = setDT(pData)[order(Country.Region, Confirmed), .SD, .(Date)]
orderedDataList = list()
splitOrderedData = split(orderedData, orderedData$Date)
for(j in 1:length(splitOrderedData)){
orderedDataList[[j]] = cbind.data.frame(Province.State = NA,
Country.Region = unique(splitOrderedData[[j]]$Country.Region),
Lat = unique(splitOrderedData[[j]]$Lat)[1],
Long = unique(splitOrderedData[[j]]$Long)[1],
Date = unique(splitOrderedData[[j]]$Date),
Confirmed = sum(splitOrderedData[[j]]$Confirmed),
Recovered = sum(splitOrderedData[[j]]$Recovered),
Deaths = sum(splitOrderedData[[j]]$Deaths),
MaxConfirmed = j,
Days = j
)[1,]
}
tmpData = rbindlist(orderedDataList)
tmpData$MaxConfirmed = max(tmpData$Confirmed)
if(input$firstCase){
tmpData = dplyr::filter(tmpData, tmpData$Confirmed>0)
}
newWorldData[[i]] = tmpData
}else{
pData$Province.State = NA
pData$Days = seq(1, length(unique(pData$Date)), 1)
if(input$firstCase){
pData = dplyr::filter(pData, pData$Confirmed>0)
}
newWorldData[[i]] = pData
}
}
firstCase = F
head(dataWorld)
splitDataWorld = split(dataWorld, dataWorld$Country.Region)
countryNanmes = names(splitDataWorld)
newWorldData = list()
for(i in 1:length(countryNanmes)){
print(i)
c = countryNanmes[i]
d = nrow(splitDataWorld[[c]])
pData = splitDataWorld[[c]]
pData$MaxConfirmed = max(pData$Confirmed)
if(length(pData$Province.State) > length(unique(dataWorld$Date))){
orderedData = setDT(pData)[order(Country.Region, Confirmed), .SD, .(Date)]
orderedDataList = list()
splitOrderedData = split(orderedData, orderedData$Date)
for(j in 1:length(splitOrderedData)){
orderedDataList[[j]] = cbind.data.frame(Province.State = NA,
Country.Region = unique(splitOrderedData[[j]]$Country.Region),
Lat = unique(splitOrderedData[[j]]$Lat)[1],
Long = unique(splitOrderedData[[j]]$Long)[1],
Date = unique(splitOrderedData[[j]]$Date),
Confirmed = sum(splitOrderedData[[j]]$Confirmed),
Recovered = sum(splitOrderedData[[j]]$Recovered),
Deaths = sum(splitOrderedData[[j]]$Deaths),
MaxConfirmed = j,
Days = j
)[1,]
}
tmpData = rbindlist(orderedDataList)
tmpData$MaxConfirmed = max(tmpData$Confirmed)
if(firstCase){
tmpData = dplyr::filter(tmpData, tmpData$Confirmed>0)
}
newWorldData[[i]] = tmpData
}else{
pData$Province.State = NA
pData$Days = seq(1, length(unique(pData$Date)), 1)
if(firstCase){
pData = dplyr::filter(pData, pData$Confirmed>0)
}
newWorldData[[i]] = pData
}
}
newWorldDataFull = rbindlist(newWorldData, use.names = TRUE, fill = TRUE)[,-"Province.State"]
colnames(newWorldDataFull)[2] = "Country"
newWorldDataFull = dplyr::filter(newWorldDataFull, MaxConfirmed >= 100)
countries = as.character(newWorldDataFull$Country)
data = list(newWorldDataFull, countries)
data2 = data[[1]]
head(data2)
setwd("~/Documents/GitHub/Covid2019Turkey/")
population <- read.table("www/data/population.txt", header = TRUE, sep = "\t", )
population <- read.table("www/data/population.txt", header = TRUE, sep = "\t")
head(data)
population <- read.table("www/data/population.txt", header = TRUE, sep = "\t",)
population <- read.table("www/data/population.txt", header = TRUE, sep = "\t")
head(data)
class(data2)
data2
data = list(newWorldDataFull, countries)
data
data[[1]]
data2 = data[[1]]
population <- read.table("www/data/population.txt", header = TRUE, sep = "\t")
head(population)
population <- read.table("www/data/population.txt", sep="\t", header=TRUE, comment.char="#",
na.strings=".", stringsAsFactors=FALSE,
quote="", fill=FALSE)
head(population)
head(data2)
merge(data2, population, by.x = "Country").
mergedData = merge(data2, population, by.x = "Country")
head(mergedData)
mergedData[mergedData$Country == "Turkey",]
mergedData$popAdjustedCase = 1000000 / mergedData$Confirmed/mergedData$Population
mergedData[mergedData$Country == "Turkey",]
mergedData$popAdjustedCase = mergedData$Confirmed/mergedData$Population
mergedData[mergedData$Country == "Turkey",]
mergedData$Confirmed[mergedData$Country == "Turkey",]
mergedData$Population
mergedData$Confirmed
mergedData$popAdjustedCase = 1000000/(mergedData$Population/mergedData$Confirmed)
mergedData[mergedData$Country == "Turkey",]
population
tr = data2[data2$Country == "Turkey",]
tr
dim(tr)
trPop = population[population$Country == "Turkey",]
trPop
mergedData = merge(data2, population, by.y = "Country")
head(mergedData)
mergedData[mergedData$Country == "Turkey",]
mTR = mergedData[mergedData$Country == "Turkey",]
dim(mTR)
dim(tr)
dim(mTR)
mTR
tr
dim(tr)
dim(trPop)
mTR = mergedData[mergedData$Country == "Turkey",]
dim(mTR)
mergedData = merge(data2, population, by.y = "Country", by.x = "Country")
head(mergedData)
tr = data2[data2$Country == "Turkey",]
dim(tr)
trPop = population[population$Country == "Turkey",]
dim(trPop)
mTR = mergedData[mergedData$Country == "Turkey",]
dim(mTR)
mTR
mergedData = dplyr::left_join(data2, population,
by = c("Country"))
head(mergedData)
tr = data2[data2$Country == "Turkey",]
dim(tr)
trPop = population[population$Country == "Turkey",]
dim(trPop)
mTR = mergedData[mergedData$Country == "Turkey",]
dim(mTR)
mergedData$popAdjustedCase = 1000000/(mergedData$Population/mergedData$Confirmed)
mergedData[mergedData$Country == "Turkey",]
dim(mTR)
mTR
mergedData$popAdjustedCase = 1000000/(mergedData$Population/mergedData$Confirmed)
mergedData[mergedData$Country == "Turkey",]
mergedData$popAdjustedCase
mergedData$popAdjustedCase
mergedData = merge(data2, population, by.y = "Country", by.x = "Country")
head(mergedData)
mTR = mergedData[mergedData$Country == "Turkey",]
mTR
firstCase = F
url = "https://raw.githubusercontent.com/datasets/covid-19/master/data/time-series-19-covid-combined.csv"
dataWorld = read.csv(url)
head(dataWorld)
dataWorld$Province.State = as.character(dataWorld$Province.State)
dataWorld$Province.State = noquote(dataWorld$Province.State)
head(dataWorld)
splitDataWorld = split(dataWorld, dataWorld$Country.Region)
countryNanmes = names(splitDataWorld)
newWorldData = list()
for(i in 1:length(countryNanmes)){
print(i)
c = countryNanmes[i]
d = nrow(splitDataWorld[[c]])
pData = splitDataWorld[[c]]
pData$MaxConfirmed = max(pData$Confirmed)
if(length(pData$Province.State) > length(unique(dataWorld$Date))){
orderedData = setDT(pData)[order(Country.Region, Confirmed), .SD, .(Date)]
orderedDataList = list()
splitOrderedData = split(orderedData, orderedData$Date)
for(j in 1:length(splitOrderedData)){
orderedDataList[[j]] = cbind.data.frame(Province.State = NA,
Country.Region = unique(splitOrderedData[[j]]$Country.Region),
Lat = unique(splitOrderedData[[j]]$Lat)[1],
Long = unique(splitOrderedData[[j]]$Long)[1],
Date = unique(splitOrderedData[[j]]$Date),
Confirmed = sum(splitOrderedData[[j]]$Confirmed),
Recovered = sum(splitOrderedData[[j]]$Recovered),
Deaths = sum(splitOrderedData[[j]]$Deaths),
MaxConfirmed = j,
Days = j
)[1,]
}
tmpData = rbindlist(orderedDataList)
tmpData$MaxConfirmed = max(tmpData$Confirmed)
if(firstCase){
tmpData = dplyr::filter(tmpData, tmpData$Confirmed>0)
}
newWorldData[[i]] = tmpData
}else{
pData$Province.State = NA
pData$Days = seq(1, length(unique(pData$Date)), 1)
if(firstCase){
pData = dplyr::filter(pData, pData$Confirmed>0)
}
newWorldData[[i]] = pData
}
}
newWorldDataFull = rbindlist(newWorldData, use.names = TRUE, fill = TRUE)[,-"Province.State"]
colnames(newWorldDataFull)[2] = "Country"
newWorldDataFull = dplyr::filter(newWorldDataFull, MaxConfirmed >= 100)
countries = as.character(newWorldDataFull$Country)
data = list(newWorldDataFull, countries)
data2 = data[[1]]
head(data2)
data2[data2$Country=="Albania",]
head(population)
mergedData = merge(data2, population, by.y = "Country", by.x = "Country")
head(mergedData)
mergedData = dplyr::left_join(data2, population,
by = c("Country"))
mergedData = merge(data2, population, by.y = "Country", by.x = "Country")
head(mergedData)
tr = data2[data2$Country == "Turkey",]
mTR = mergedData[mergedData$Country == "Turkey",]
mTR
mergedData$popAdjustedCase = 1000000/(mergedData$Population/mergedData$Confirmed)
mergedData$popAdjustedCase
mTR = mergedData[mergedData$Country == "Turkey",]
dim(mTR)
mTR
firstCase = T
url = "https://raw.githubusercontent.com/datasets/covid-19/master/data/time-series-19-covid-combined.csv"
dataWorld = read.csv(url)
head(dataWorld)
dataWorld$Province.State = as.character(dataWorld$Province.State)
dataWorld$Province.State = noquote(dataWorld$Province.State)
head(dataWorld)
splitDataWorld = split(dataWorld, dataWorld$Country.Region)
countryNanmes = names(splitDataWorld)
newWorldData = list()
for(i in 1:length(countryNanmes)){
print(i)
c = countryNanmes[i]
d = nrow(splitDataWorld[[c]])
pData = splitDataWorld[[c]]
pData$MaxConfirmed = max(pData$Confirmed)
if(length(pData$Province.State) > length(unique(dataWorld$Date))){
orderedData = setDT(pData)[order(Country.Region, Confirmed), .SD, .(Date)]
orderedDataList = list()
splitOrderedData = split(orderedData, orderedData$Date)
for(j in 1:length(splitOrderedData)){
orderedDataList[[j]] = cbind.data.frame(Province.State = NA,
Country.Region = unique(splitOrderedData[[j]]$Country.Region),
Lat = unique(splitOrderedData[[j]]$Lat)[1],
Long = unique(splitOrderedData[[j]]$Long)[1],
Date = unique(splitOrderedData[[j]]$Date),
Confirmed = sum(splitOrderedData[[j]]$Confirmed),
Recovered = sum(splitOrderedData[[j]]$Recovered),
Deaths = sum(splitOrderedData[[j]]$Deaths),
MaxConfirmed = j,
Days = j
)[1,]
}
tmpData = rbindlist(orderedDataList)
tmpData$MaxConfirmed = max(tmpData$Confirmed)
if(firstCase){
tmpData = dplyr::filter(tmpData, tmpData$Confirmed>0)
}
newWorldData[[i]] = tmpData
}else{
pData$Province.State = NA
pData$Days = seq(1, length(unique(pData$Date)), 1)
if(firstCase){
pData = dplyr::filter(pData, pData$Confirmed>0)
}
newWorldData[[i]] = pData
}
}
newWorldDataFull = rbindlist(newWorldData, use.names = TRUE, fill = TRUE)[,-"Province.State"]
colnames(newWorldDataFull)[2] = "Country"
newWorldDataFull = dplyr::filter(newWorldDataFull, MaxConfirmed >= 100)
countries = as.character(newWorldDataFull$Country)
data = list(newWorldDataFull, countries)
data2 = data[[1]]
head(data2)
data2[data2$Country=="Albania",]
setwd("~/Documents/GitHub/Covid2019Turkey/")
population <- read.table("www/data/population.txt", sep="\t", header=TRUE, comment.char="#",
na.strings=".", stringsAsFactors=FALSE,
quote="", fill=FALSE)
head(population)
mergedData = merge(data2, population, by.y = "Country", by.x = "Country")
head(mergedData)
mergedData$popAdjustedCase = 1000000/(mergedData$Population/mergedData$Confirmed)
mergedData$popAdjustedCase
mTR = mergedData[mergedData$Country == "Turkey",]
dim(mTR)
mTR
runApp()
data2[data2$Country=="Turkey",]
firstCase = T
url = "https://raw.githubusercontent.com/datasets/covid-19/master/data/time-series-19-covid-combined.csv"
dataWorld = read.csv(url)
head(dataWorld)
dataWorld$Province.State = as.character(dataWorld$Province.State)
dataWorld$Province.State = noquote(dataWorld$Province.State)
head(dataWorld)
splitDataWorld = split(dataWorld, dataWorld$Country.Region)
countryNanmes = names(splitDataWorld)
newWorldData = list()
for(i in 1:length(countryNanmes)){
print(i)
c = countryNanmes[i]
d = nrow(splitDataWorld[[c]])
pData = splitDataWorld[[c]]
pData$MaxConfirmed = max(pData$Confirmed)
if(length(pData$Province.State) > length(unique(dataWorld$Date))){
orderedData = setDT(pData)[order(Country.Region, Confirmed), .SD, .(Date)]
orderedDataList = list()
splitOrderedData = split(orderedData, orderedData$Date)
for(j in 1:length(splitOrderedData)){
orderedDataList[[j]] = cbind.data.frame(Province.State = NA,
Country.Region = unique(splitOrderedData[[j]]$Country.Region),
Lat = unique(splitOrderedData[[j]]$Lat)[1],
Long = unique(splitOrderedData[[j]]$Long)[1],
Date = unique(splitOrderedData[[j]]$Date),
Confirmed = sum(splitOrderedData[[j]]$Confirmed),
Recovered = sum(splitOrderedData[[j]]$Recovered),
Deaths = sum(splitOrderedData[[j]]$Deaths),
MaxConfirmed = j,
Days = j
)[1,]
}
tmpData = rbindlist(orderedDataList)
tmpData$MaxConfirmed = max(tmpData$Confirmed)
if(firstCase){
tmpData = dplyr::filter(tmpData, tmpData$Confirmed>0)
}
newWorldData[[i]] = tmpData
}else{
pData$Province.State = NA
pData$Days = seq(1, length(unique(pData$Date)), 1)
if(firstCase){
pData = dplyr::filter(pData, pData$Confirmed>0)
}
newWorldData[[i]] = pData
}
}
newWorldDataFull = rbindlist(newWorldData, use.names = TRUE, fill = TRUE)[,-"Province.State"]
colnames(newWorldDataFull)[2] = "Country"
newWorldDataFull = dplyr::filter(newWorldDataFull, MaxConfirmed >= 100)
countries = as.character(newWorldDataFull$Country)
data = list(newWorldDataFull, countries)
data2 = data[[1]]
head(data2)
data2[data2$Country=="Turkey",]
population <- read.table("www/data/population.txt", sep="\t", header=TRUE, comment.char="#",
na.strings=".", stringsAsFactors=FALSE,
quote="", fill=FALSE)
head(population)
mergedData = merge(data2, population, by.y = "Country")
head(mergedData)
mergedData$popAdjustedCase = 1000000/(mergedData$Population/mergedData$Confirmed)
mergedData$popAdjustedCase
mTR = mergedData[mergedData$Country == "Turkey",]
dim(mTR)
mTR
mergedData = merge(data2, population, by.x = "Country")
head(mergedData)
mergedData$popAdjustedCase = 1000000/(mergedData$Population/mergedData$Confirmed)
mergedData$popAdjustedCase
mTR = mergedData[mergedData$Country == "Turkey",]
mTR
mergedData <- left_join(data2, population,
by = c("Country" ))
mergedData$popAdjustedCase = 1000000/(mergedData$Population/mergedData$Confirmed)
mergedData$popAdjustedCase
mTR = mergedData[mergedData$Country == "Turkey",]
mTR
runApp()
runApp()
mergedData$popAdjustedDeaths = 1000000/(mergedData$Population/mergedData$Deaths)
mTR = mergedData[mergedData$Country == "Turkey",]
mTR
mergedData$popAdjustedRecovered = 1000000/(mergedData$Population/mergedData$Recovered)
mTR = mergedData[mergedData$Country == "Turkey",]
mTR
mergedData$Recovered
mergedData$Recovered[is.na(mergedData$Recovered)] <- 0
mergedData$Recovered
runApp()
getwd()
rsconnect::deployApp()
2448/502
1000/(2448/502)
