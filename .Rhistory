c,c,c,c,1,c,
c,c,c,c,c,1), ncol = attribute)
m=0.5
mu =  rep(m, ncol(q.matrix))
?CDM::sim.din
q.matrix = read.table("~/Documents/Emine Yavuz/qmatrix/Q6_40.txt")
q.matrix
mu =  rep(m, ncol(q.matrix))
for(s in 1:length(size)){
for(k in 1:length(attribute)){
for(l in 1:length(item)){
path = paste0("~/Documents/Emine Yavuz/qmatrix/Q",attribute[k],"_",item[l],".txt")
q.matrix = read.table(path, header = F)
q.matrix = as.matrix(q.matrix)
# Slipping parameters
slip =runif(item[l], 0, 0.2)
# Guessing parameters
guess =runif(item[l], 0, 0.2)
# sim.din(N=100, q.matrix, guess=rep(0.2, nrow(q.matrix)),
#         slip=guess, rule="DINA")
#
# simdata <- CDM::sim.din(N=100, q.matrix, guess=rep(0.2, nrow(q.matrix)),
#                         slip=guess, mean=rep(0, ncol(q.matrix)), Sigma=diag(1, ncol(q.matrix)),
#                         rule="DINA", alpha=NULL)
resultDINA <- list()
resultDINO <- list()
for(i in 1:100) {
simdata <- CDM::sim.din(N=size[s], q.matrix, guess=rep(0.2, nrow(q.matrix)),
slip=guess, mean= mu, Sigma=Sigma,
rule= rule, alpha=NULL)
### Dina Estimations
Dina<- din(data = simdata$dat, q.matrix = q.matrix, rule = "DINA", seed = seed)
summaryDINA = summary(Dina)
classAccuracyDINA = cdm.est.class.accuracy(Dina)
mean.rmsea = summaryDINA$din.object$mean.rmsea
itemfit.rmsea = summaryDINA$din.object$itemfit.rmsea
loglikelihood = summaryDINA$din.object$loglike
deviance = summaryDINA$deviance
AIC = summaryDINA$AIC
BIC = summaryDINA$BIC
MLE_patt_Pa_est = classAccuracyDINA$statistics$Pa_est[1]
n = ncol(q.matrix)
MLE_Pa_est_attiribute = classAccuracyDINA$statistics[3:(3+n-1),1]
names(MLE_Pa_est_attiribute) = paste0(rep("MLE_Pa_est_N",n),1:n)
MAP_patt_Pa_est = classAccuracyDINA$statistics$Pa_est[2]
MAP_Pa_est_attiribute = classAccuracyDINA$statistics[(2+n+1):nrow(classAccuracyDINA$statistics),1]
names(MAP_Pa_est_attiribute) = paste0(rep("MAP_Pa_est_N",n),1:n)
resultDINA[[i]] = cbind.data.frame(mean.rmsea, loglikelihood, deviance, AIC, BIC, MLE_patt_Pa_est,
t(MLE_Pa_est_attiribute), MAP_patt_Pa_est, t(MAP_Pa_est_attiribute))
### Dino Estimations
Dino<- din(data = simdata$dat, q.matrix = q.matrix, rule = "DINO", seed = seed)
summaryDINO = summary(Dino)
classAccuracyDINO = cdm.est.class.accuracy(Dino)
mean.rmsea = summaryDINO$din.object$mean.rmsea
itemfit.rmsea = summaryDINO$din.object$itemfit.rmsea
loglikelihood = summaryDINO$din.object$loglike
deviance = summaryDINO$deviance
AIC = summaryDINO$AIC
BIC = summaryDINO$BIC
MLE_patt_Pa_est = classAccuracyDINO$statistics$Pa_est[1]
n = ncol(q.matrix)
MLE_Pa_est_attiribute = classAccuracyDINO$statistics[3:(3+n-1),1]
names(MLE_Pa_est_attiribute) = paste0(rep("MLE_Pa_est_N",n),1:n)
MAP_patt_Pa_est = classAccuracyDINO$statistics$Pa_est[2]
MAP_Pa_est_attiribute = classAccuracyDINO$statistics[(2+n+1):nrow(classAccuracyDINO$statistics),1]
names(MAP_Pa_est_attiribute) = paste0(rep("MAP_Pa_est_N",n),1:n)
resultDINO[[i]] = cbind.data.frame(mean.rmsea, loglikelihood, deviance, AIC, BIC, MLE_patt_Pa_est,
t(MLE_Pa_est_attiribute), MAP_patt_Pa_est, t(MAP_Pa_est_attiribute))
}
resultsDINA = do.call(rbind.data.frame,resultDINA)
resultsDINO = do.call(rbind.data.frame,resultDINO)
pathDINA = paste0("~/Documents/Emine Yavuz/results/n_",size[s],"/DINA/Q_",attribute[k],"_",item[l],"_DINA.xlsx")
pathDINO = paste0("~/Documents/Emine Yavuz/results/n_",size[s],"/DINO/Q_",attribute[k],"_",item[l],"_DINO.xlsx")
# write.table(results, path2, quote = F, row.names = F, sep = "\t")
write.xlsx(resultsDINA, pathDINA)
write.xlsx(resultsDINO, pathDINO)
}
}
}
library(MVN)
mvn
r = mvn(iris[,1:3], multivariateOutlierMethod = "quan")
r$Descriptives
r$multivariateNormality
r = mvn(iris[,1:3], multivariateOutlierMethod = "quan", showOutliers = T)
r
r$multivariateOutliers
r = mvn(iris[,1:3], multivariateOutlierMethod = "quan", showOutliers = T, showNewData = T)
x = c(55,55,45,45)
mean(x)
y = c(55,45)
mean(y)
sd(y)
sdx
sd(x)
sqrt(0.671)
library(survival)
?survfit
data = read.table("~/Documents/GitHub/geneSurv/www/data/GSE2034.txt", header = T, sep = "\t")
survivalTime = "dmfs_time"
statusVariable = "dmfs_event"
status="1"
factors = "ER_IHC"
survivalTable = TRUE
caseSummary = TRUE
hr=TRUE
meanMedianSurvivalTimes = TRUE
quartilesOfSurvivalTimes = FALSE
ci = "log"
varianceEstimation = "greenwood"
comparisonTest = "logRank"
confidenceLevel = 95
referenceCategory = "first"
typeOfTest = "asymptotic"
kmCurve = TRUE
p= 1;q = 1; data = data
fname = factors
if(!is.null(survivalTime)){
survivalTime = as.matrix(data[, survivalTime, drop = FALSE])
survivalTime = apply(survivalTime, 2, as.numeric)
if(sum(survivalTime[,1], na.rm = T) == 0){
stop("Survival time is not a numeric variable.")
}
}
if(!is.null(factors)){
factorsName = data[, factors, drop = FALSE]
}
if(!is.null(factors)){
factors = as.factor(data[, factors])
}
if(referenceCategory != "first" && !is.null(factors)){
factors <- factor(factors, levels=rev(levels(factors)))
}
if(!is.null(statusVariable)){
statusVariable = data[, statusVariable]
}
if(!is.null(status)){
if(is.numeric(status)){status = as.factor(status)}else{status = as.factor(status)}
}
if(!is.null(factors)){
newData = data.frame(id =seq(1,dim(survivalTime)[1], 1), survivalTime= survivalTime,
statusVar=statusVariable,factor = factors)
newData = newData[complete.cases(newData),]
#newData$survivalTime = as.numeric(newData$survivalTime)
colnames(newData) = c("id", "time", "statusVar", "factor")
}else{
newData = data.frame(id =seq(1,dim(survivalTime)[1], 1), survivalTime= survivalTime,
statusVar=statusVariable)
newData = newData[complete.cases(newData),]
# newData$survivalTime = as.numeric(newData$survivalTime)
colnames(newData) = c("id", "time", "statusVar")
}
newData$statusVar = newData$statusVar%in%status
if(!is.null(factors)){
if(caseSummary){
splitFactor = split(newData, newData$factor)
caseSummary2 <- lapply(splitFactor, FUN = function(x){
if(TRUE %in% x$statusVar){
n = nrow(x)
nOfEvent =  as.numeric(table(x$statusVar)[as.factor(names(table(x$statusVar))) %in% TRUE][[1]])
percentOfEvent = as.numeric(formatC((nOfEvent/n)*100, digits = 3, format = "f"))
if(percentOfEvent == 100){
nOfCensor = as.numeric(formatC(0, digits = 3, format = "f"))
percentOfCensor = as.numeric(formatC(0, digits = 3, format = "f"))
}else{
nOfCensor =  as.numeric(table(x$statusVar)[(!(names(table(x$statusVar))) %in% TRUE)][[1]])
percentOfCensor = as.numeric(formatC((nOfCensor/n)*100, digits = 3, format = "f"))
}
caseSummary = data.frame(n,nOfEvent, percentOfEvent, nOfCensor, percentOfCensor)
colnames(caseSummary) = c("n", "n of event", "% of event", "n of censor", "% of censor")
return(caseSummary)
}else{
stop("Factor variable is not appropriate. Not enough events in at least one of the factor groups.")
}
})
}
assign("newData", newData, envir=.GlobalEnv)  # put the dat in the global env
compareCurves <- survfit(Surv(time, statusVar) ~ factor, data = newData, conf.type = ci, error = varianceEstimation, conf.int = confidenceLevel/100)
summary = summary(compareCurves, rmean = "individual")
if(survivalTable){
survivalTableResult = data.frame(summary[c(2:5,7,8,10,9)])
survivalTableResult$surv = as.numeric(formatC(summary$surv, digits = 3, format = "f"))
survivalTableResult$std.err = as.numeric(formatC(summary$std.err, digits = 3, format = "f"))
survivalTableResult$upper = as.numeric(formatC(summary$upper, digits = 3, format = "f"))
survivalTableResult$lower = as.numeric(formatC(summary$lower, digits = 3, format = "f"))
survivalTableResult = split(survivalTableResult[-5], survivalTableResult$strata)
names(survivalTableResult) = levels(factors)
}
survivalTableLastResult = lapply(survivalTableResult, function(x)
{
colnames(x) = c("Time", "Number at risk", "Number of event", "Cumulative probability of surviving", "S.E.", "Lower limit", "Upper limit")
return(x)
}
)
}else{
survivalTableLastResult = NULL
}
summary = summary(compareCurves, rmean = "individual")
summary
survivalTableResult = data.frame(summary[c(2:5,7,8,10,9)])
require(devtools)
install_version("survival", version = "2.36-1", repos = "http://cran.us.r-project.org")
library(survival)
?survfit
data = read.table("~/Documents/GitHub/geneSurv/www/data/GSE2034.txt", header = T, sep = "\t")
survivalTime = "dmfs_time"
statusVariable = "dmfs_event"
status="1"
factors = "ER_IHC"
survivalTable = TRUE
caseSummary = TRUE
hr=TRUE
meanMedianSurvivalTimes = TRUE
quartilesOfSurvivalTimes = FALSE
ci = "log"
varianceEstimation = "greenwood"
comparisonTest = "logRank"
confidenceLevel = 95
referenceCategory = "first"
typeOfTest = "asymptotic"
kmCurve = TRUE
p= 1;q = 1; data = data
fname = factors
if(!is.null(survivalTime)){
survivalTime = as.matrix(data[, survivalTime, drop = FALSE])
survivalTime = apply(survivalTime, 2, as.numeric)
if(sum(survivalTime[,1], na.rm = T) == 0){
stop("Survival time is not a numeric variable.")
}
}
if(!is.null(factors)){
factorsName = data[, factors, drop = FALSE]
}
if(!is.null(factors)){
factors = as.factor(data[, factors])
}
if(referenceCategory != "first" && !is.null(factors)){
factors <- factor(factors, levels=rev(levels(factors)))
}
if(!is.null(statusVariable)){
statusVariable = data[, statusVariable]
}
if(!is.null(status)){
if(is.numeric(status)){status = as.factor(status)}else{status = as.factor(status)}
}
if(!is.null(factors)){
newData = data.frame(id =seq(1,dim(survivalTime)[1], 1), survivalTime= survivalTime,
statusVar=statusVariable,factor = factors)
newData = newData[complete.cases(newData),]
#newData$survivalTime = as.numeric(newData$survivalTime)
colnames(newData) = c("id", "time", "statusVar", "factor")
}else{
newData = data.frame(id =seq(1,dim(survivalTime)[1], 1), survivalTime= survivalTime,
statusVar=statusVariable)
newData = newData[complete.cases(newData),]
# newData$survivalTime = as.numeric(newData$survivalTime)
colnames(newData) = c("id", "time", "statusVar")
}
newData$statusVar = newData$statusVar%in%status
if(caseSummary){
splitFactor = split(newData, newData$factor)
caseSummary <- lapply(splitFactor, FUN = function(x){
if(TRUE %in% x$statusVar){
n = nrow(x)
nOfEvent =  as.numeric(table(x$statusVar)[as.factor(names(table(x$statusVar))) %in% TRUE][[1]])
percentOfEvent = as.numeric(formatC((nOfEvent/n)*100, digits = 3, format = "f"))
if(percentOfEvent == 100){
nOfCensor = as.numeric(formatC(0, digits = 3, format = "f"))
percentOfCensor = as.numeric(formatC(0, digits = 3, format = "f"))
}else{
nOfCensor =  as.numeric(table(x$statusVar)[(!(names(table(x$statusVar))) %in% TRUE)][[1]])
percentOfCensor = as.numeric(formatC((nOfCensor/n)*100, digits = 3, format = "f"))
}
caseSummary = data.frame(n,nOfEvent, percentOfEvent, nOfCensor, percentOfCensor)
colnames(caseSummary) = c("n", "n of event", "% of event", "n of censor", "% of censor")
return(caseSummary)
}else{
stop("Factor variable is not appropriate. Not enough events in at least one of the factor groups.")
}
})
}
assign("newData", newData, envir=.GlobalEnv)  # put the dat in the global env
compareCurves <- survfit(Surv(time, statusVar) ~ factor, data = newData, conf.type = ci, error = varianceEstimation, conf.int = confidenceLevel/100)
summary = summary(compareCurves, rmean = "individual")
summary
if(survivalTable){
survivalTableResult = data.frame(summary[c(2:5,7,8,10,9)])
survivalTableResult$surv = as.numeric(formatC(summary$surv, digits = 3, format = "f"))
survivalTableResult$std.err = as.numeric(formatC(summary$std.err, digits = 3, format = "f"))
survivalTableResult$upper = as.numeric(formatC(summary$upper, digits = 3, format = "f"))
survivalTableResult$lower = as.numeric(formatC(summary$lower, digits = 3, format = "f"))
survivalTableResult = split(survivalTableResult[-5], survivalTableResult$strata)
names(survivalTableResult) = levels(factors)
}
survivalTableResult = data.frame(summary[c(2:5,7,8,10,9)])
survivalTableResult
shiny::runApp('Documents/GitHub/Covid2019Turkey')
url = "https://raw.githubusercontent.com/datasets/covid-19/master/data/time-series-19-covid-combined.csv"
dataWorld = read.csv(url)
head(dataWorld)
dataWorld$Province.State = as.character(dataWorld$Province.State)
dataWorld$Province.State = noquote(dataWorld$Province.State)
head(dataWorld)
splitDataWorld = split(dataWorld, dataWorld$Country.Region)
countryNanmes = names(splitDataWorld)
newWorldData = list()
firstCase = TRUE
filter=100
for(i in 1:length(countryNanmes)){
print(i)
c = countryNanmes[i]
d = nrow(splitDataWorld[[c]])
pData = splitDataWorld[[c]]
pData$MaxConfirmed = max(pData$Confirmed)
if(length(pData$Province.State) > length(unique(dataWorld$Date))){
orderedData = setDT(pData)[order(Country.Region, Confirmed), .SD, .(Date)]
orderedDataList = list()
splitOrderedData = split(orderedData, orderedData$Date)
for(j in 1:length(splitOrderedData)){
orderedDataList[[j]] = cbind.data.frame(Province.State = NA,
Country.Region = unique(splitOrderedData[[j]]$Country.Region),
Lat = unique(splitOrderedData[[j]]$Lat)[1],
Long = unique(splitOrderedData[[j]]$Long)[1],
Date = unique(splitOrderedData[[j]]$Date),
Confirmed = sum(splitOrderedData[[j]]$Confirmed),
Recovered = sum(splitOrderedData[[j]]$Recovered),
Deaths = sum(splitOrderedData[[j]]$Deaths),
MaxConfirmed = j,
Days = j
)[1,]
}
tmpData = rbindlist(orderedDataList)
tmpData$MaxConfirmed = max(tmpData$Confirmed)
if(firstCase){
tmpData = filter(tmpData, tmpData$Confirmed>0)
}
newWorldData[[i]] = tmpData
}else{
pData$Province.State = NA
pData$Days = seq(1, length(unique(pData$Date)), 1)
if(firstCase){
pData = filter(pData, pData$Confirmed>0)
}
newWorldData[[i]] = pData
}
}
newWorldDataFull = rbindlist(newWorldData, use.names = TRUE, fill = TRUE)[,-"Province.State"]
newWorldData
firstCase = TRUE
filter=100
url = "https://raw.githubusercontent.com/datasets/covid-19/master/data/time-series-19-covid-combined.csv"
dataWorld = read.csv(url)
head(dataWorld)
dataWorld$Province.State = as.character(dataWorld$Province.State)
dataWorld$Province.State = noquote(dataWorld$Province.State)
head(dataWorld)
splitDataWorld = split(dataWorld, dataWorld$Country.Region)
countryNanmes = names(splitDataWorld)
newWorldData = list()
i=1
print(i)
c = countryNanmes[i]
d = nrow(splitDataWorld[[c]])
pData = splitDataWorld[[c]]
pData$MaxConfirmed = max(pData$Confirmed)
pData
if(length(pData$Province.State) > length(unique(dataWorld$Date))){
orderedData = setDT(pData)[order(Country.Region, Confirmed), .SD, .(Date)]
orderedDataList = list()
splitOrderedData = split(orderedData, orderedData$Date)
for(j in 1:length(splitOrderedData)){
orderedDataList[[j]] = cbind.data.frame(Province.State = NA,
Country.Region = unique(splitOrderedData[[j]]$Country.Region),
Lat = unique(splitOrderedData[[j]]$Lat)[1],
Long = unique(splitOrderedData[[j]]$Long)[1],
Date = unique(splitOrderedData[[j]]$Date),
Confirmed = sum(splitOrderedData[[j]]$Confirmed),
Recovered = sum(splitOrderedData[[j]]$Recovered),
Deaths = sum(splitOrderedData[[j]]$Deaths),
MaxConfirmed = j,
Days = j
)[1,]
}
tmpData = rbindlist(orderedDataList)
tmpData$MaxConfirmed = max(tmpData$Confirmed)
if(firstCase){
tmpData = filter(tmpData, tmpData$Confirmed>0)
}
newWorldData[[i]] = tmpData
}else{
pData$Province.State = NA
pData$Days = seq(1, length(unique(pData$Date)), 1)
if(firstCase){
pData = filter(pData, pData$Confirmed>0)
}
newWorldData[[i]] = pData
}
newWorldData
length(pData$Province.State) > length(unique(dataWorld$Date))
c = countryNanmes[i]
d = nrow(splitDataWorld[[c]])
pData = splitDataWorld[[c]]
pData$MaxConfirmed = max(pData$Confirmed)
length(pData$Province.State) > length(unique(dataWorld$Date))
pData$Province.State = NA
pData$Days = seq(1, length(unique(pData$Date)), 1)
pData
if(firstCase){
pData = filter(pData, pData$Confirmed>0)
}
pData
pData = dplyr::filter(pData, pData$Confirmed>0)
firstCase = TRUE
filter=100
url = "https://raw.githubusercontent.com/datasets/covid-19/master/data/time-series-19-covid-combined.csv"
dataWorld = read.csv(url)
head(dataWorld)
dataWorld$Province.State = as.character(dataWorld$Province.State)
dataWorld$Province.State = noquote(dataWorld$Province.State)
head(dataWorld)
splitDataWorld = split(dataWorld, dataWorld$Country.Region)
countryNanmes = names(splitDataWorld)
newWorldData = list()
print(i)
c = countryNanmes[i]
d = nrow(splitDataWorld[[c]])
pData = splitDataWorld[[c]]
pData$MaxConfirmed = max(pData$Confirmed)
pData$Province.State = NA
pData$Days = seq(1, length(unique(pData$Date)), 1)
if(firstCase){
pData = dplyr::filter(pData, pData$Confirmed>0)
}
pData
runApp('Documents/GitHub/Covid2019Turkey')
firstCase = TRUE
filter=100
url = "https://raw.githubusercontent.com/datasets/covid-19/master/data/time-series-19-covid-combined.csv"
dataWorld = read.csv(url)
head(dataWorld)
dataWorld$Province.State = as.character(dataWorld$Province.State)
dataWorld$Province.State = noquote(dataWorld$Province.State)
head(dataWorld)
splitDataWorld = split(dataWorld, dataWorld$Country.Region)
countryNanmes = names(splitDataWorld)
newWorldData = list()
for(i in 1:length(countryNanmes)){
print(i)
c = countryNanmes[i]
d = nrow(splitDataWorld[[c]])
pData = splitDataWorld[[c]]
pData$MaxConfirmed = max(pData$Confirmed)
if(length(pData$Province.State) > length(unique(dataWorld$Date))){
orderedData = setDT(pData)[order(Country.Region, Confirmed), .SD, .(Date)]
orderedDataList = list()
splitOrderedData = split(orderedData, orderedData$Date)
for(j in 1:length(splitOrderedData)){
orderedDataList[[j]] = cbind.data.frame(Province.State = NA,
Country.Region = unique(splitOrderedData[[j]]$Country.Region),
Lat = unique(splitOrderedData[[j]]$Lat)[1],
Long = unique(splitOrderedData[[j]]$Long)[1],
Date = unique(splitOrderedData[[j]]$Date),
Confirmed = sum(splitOrderedData[[j]]$Confirmed),
Recovered = sum(splitOrderedData[[j]]$Recovered),
Deaths = sum(splitOrderedData[[j]]$Deaths),
MaxConfirmed = j,
Days = j
)[1,]
}
tmpData = rbindlist(orderedDataList)
tmpData$MaxConfirmed = max(tmpData$Confirmed)
if(firstCase){
tmpData = filter(tmpData, tmpData$Confirmed>0)
}
newWorldData[[i]] = tmpData
}else{
pData$Province.State = NA
pData$Days = seq(1, length(unique(pData$Date)), 1)
if(firstCase){
pData = dplyr::filter(pData, pData$Confirmed>0)
}
newWorldData[[i]] = pData
}
}
newWorldDataFull = rbindlist(newWorldData, use.names = TRUE, fill = TRUE)[,-"Province.State"]
colnames(newWorldDataFull)[2] = "Country"
newWorldDataFull = dplyr::filter(newWorldDataFull, MaxConfirmed >= filter)
countries = as.character(newWorldDataFull$Country)
data = list(newWorldDataFull, countries)
comparedCountries = c("Turkey","US")
compareData = data.frame(newWorldDataFull[indx,])
indx = which(dataWorld()[[1]]$Country %in% comparedCountries)
compareData = data.frame(newWorldDataFull[indx,])
indx = which(newWorldDataFull$Country %in% comparedCountries)
indx = which(newWorldDataFull$Country %in% comparedCountries)
compareData = data.frame(newWorldDataFull[indx,])
firstCase=T
compareData$Country = as.character(compareData$Country)
compareData
splitCompareData = split(compareData, compareData$Country)
splitCompareData
for(count in 1:length(unique(compareData$Country))){
splitCompareData[[count]]$Days = seq(1, dim(splitCompareData[[count]])[1],1)
}
compareData = rbindlist(splitCompareData)
compareData
countries
which(countries == "Turkey")
countries[which(countries == "Turkey")]
countries[which(countries == "Turkey")][1]
countries[which(countries == "Turkey")][1]
shiny::runApp('Documents/GitHub/Covid2019Turkey')
