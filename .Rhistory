}
else if(grepl("\\(", names(df))){
df[[1]]$Country =  gsub("\\(.*","",names(df))
}
testCountries[i] = df
}
combinedTestCountries = data.table::rbindlist(testCountries)
combinedTestCountries = combinedTestCountries[complete.cases(combinedTestCountries),]
combinedTestCountries = dplyr::filter(combinedTestCountries, combinedTestCountries$Positive >=10000)
combinedTestCountries
setwd("~/Documents/GitHub/Covid2019Turkey/")
test = read.table("www/data/tests.txt", header=FALSE, comment.char="#",
na.strings=".", stringsAsFactors=FALSE,
quote="", fill=TRUE, sep = "\t")
colnames(test) = c("Country", "Tests", "Positive", "Date", "Test_million_population", "Positive_Thousand_Test", "Ref")
head(test)
test$Country
splitTest = split(test, test$Country)
testCountries = list()
for(i in 1:length(splitTest)){
df = splitTest[i]
if(grepl(":", names(df))){
df = NULL
}
else if(grepl("\\(", names(df))){
df[[1]]$Country =  gsub("\\(.*","",names(df))
}
testCountries[i] = df
}
combinedTestCountries = data.table::rbindlist(testCountries)
combinedTestCountries = combinedTestCountries[complete.cases(combinedTestCountries),]
plotData = dplyr::filter(combinedTestCountries, combinedTestCountries$Positive >=10000)
# # testCompared = c(" Australia", " Canada", " Denmark", " Italy", " Japan", " Norway",
#                  " Portugal", " South Korea", " Switzerland"," Turkey",
#                  " United Kingdom", " United States ", " Finland"," Poland"
# )
# plotData = combinedÇTestCountries[combinedTestCountries$Country %in% testCompared,]
plotData[plotData$Date %in% c("1 Apr", "2 Apr", "3 Apr", "4 Apr"), ]
plotData
setwd("~/Documents/GitHub/Covid2019Turkey/")
test = read.table("www/data/tests.txt", header=FALSE, comment.char="#",
na.strings=".", stringsAsFactors=FALSE,
quote="", fill=TRUE, sep = "\t")
colnames(test) = c("Country", "Tests", "Positive", "Date", "Test_million_population", "Positive_Thousand_Test", "Ref")
head(test)
test$Country
splitTest = split(test, test$Country)
testCountries = list()
for(i in 1:length(splitTest)){
df = splitTest[i]
if(grepl(":", names(df))){
df = NULL
}
else if(grepl("\\(", names(df))){
df[[1]]$Country =  gsub("\\(.*","",names(df))
}
testCountries[i] = df
}
combinedTestCountries = data.table::rbindlist(testCountries)
combinedTestCountries = combinedTestCountries[complete.cases(combinedTestCountries),]
plotData = dplyr::filter(combinedTestCountries, combinedTestCountries$Positive >=10000)
# # testCompared = c(" Australia", " Canada", " Denmark", " Italy", " Japan", " Norway",
#                  " Portugal", " South Korea", " Switzerland"," Turkey",
#                  " United Kingdom", " United States ", " Finland"," Poland"
# )
# plotData = combinedÇTestCountries[combinedTestCountries$Country %in% testCompared,]
plotData= plotData[plotData$Date %in% c("1 Apr", "2 Apr", "3 Apr", "4 Apr"), ]
plotData
combinedTestCountries
runApp()
rsconnect::deployApp()
runApp()
getwd()
rsconnect::deployApp()
runApp()
rsconnect::deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp()
rsconnect::deployApp()
# Load libraries
library(tidyverse)
install.packages("rlang")
install.packages("rlang")
library(padr)
install.packages("padr")
library(padr)
library(mgcv)
require(gridExtra)
require(ggplot2)
# Set paths
setwd("~/Documents/Studies/Covid19Lancet/CFR_calculation/global_estimates/")
# Set paths
setwd("~/Documents/Studies/Covid19Lancet/CFR_calculation/global_estimates/")
# Set paths
setwd("~/Documents/Studies/Covid19Lancet/CFR_calculation-master/global_estimates/")
if(grepl(Sys.info()["user"], pattern = "^adamkuchars(ki)?$")){setwd("~/Documents/GitHub/CFR_calculation/global_estimates/")}
#source data processing and plotting scripts
source('./scripts/plot_temporal/get_plot_data.R')
source('./scripts/plot_temporal/plot_country.R')
# Set parameters
zmeanHDT <- 13
zsdHDT <- 12.7
zmedianHDT <- 9.1
muHDT <- log(zmedianHDT)
sigmaHDT <- sqrt(2*(log(zmeanHDT) - muHDT))
cCFRBaseline <- 1.38
cCFREstimateRange <- c(1.23, 1.53)
# Hospitalisation to death distribution
hospitalisation_to_death_truncated <- function(x) {
plnorm(x + 1, muHDT, sigmaHDT) - plnorm(x, muHDT, sigmaHDT)
}
# Function to work out correction CFR
scale_cfr_temporal <- function(data_1_in, delay_fun = hospitalisation_to_death_truncated){
case_incidence <- data_1_in$new_cases
death_incidence <- data_1_in$new_deaths
cumulative_known_t <- NULL # cumulative cases with known outcome at time tt
# Sum over cases up to time tt
for(ii in 1:nrow(data_1_in)){
known_i <- 0 # number of cases with known outcome at time ii
for(jj in 0:(ii - 1)){
known_jj <- (case_incidence[ii - jj]*delay_fun(jj))
known_i <- known_i + known_jj
}
cumulative_known_t <- c(cumulative_known_t,known_i) # Tally cumulative known
}
# naive CFR value
b_tt <- sum(death_incidence)/sum(case_incidence)
# corrected CFR estimator
p_tt <- (death_incidence/cumulative_known_t) %>% pmin(.,1)
data.frame(nCFR = b_tt, cCFR = p_tt, total_deaths = sum(death_incidence),
cum_known_t = round(cumulative_known_t), total_cases = sum(case_incidence))
}
b_tt
# Hospitalisation to death distribution
hospitalisation_to_death_truncated <- function(x) {
plnorm(x + 1, muHDT, sigmaHDT) - plnorm(x, muHDT, sigmaHDT)
}
# Function to work out correction CFR
scale_cfr_temporal <- function(data_1_in, delay_fun = hospitalisation_to_death_truncated){
case_incidence <- data_1_in$new_cases
death_incidence <- data_1_in$new_deaths
cumulative_known_t <- NULL # cumulative cases with known outcome at time tt
# Sum over cases up to time tt
for(ii in 1:nrow(data_1_in)){
known_i <- 0 # number of cases with known outcome at time ii
for(jj in 0:(ii - 1)){
known_jj <- (case_incidence[ii - jj]*delay_fun(jj))
known_i <- known_i + known_jj
}
cumulative_known_t <- c(cumulative_known_t,known_i) # Tally cumulative known
}
# naive CFR value
b_tt <- sum(death_incidence)/sum(case_incidence)
# corrected CFR estimator
p_tt <- (death_incidence/cumulative_known_t) %>% pmin(.,1)
data.frame(nCFR = b_tt, cCFR = p_tt, total_deaths = sum(death_incidence),
cum_known_t = round(cumulative_known_t), total_cases = sum(case_incidence))
}
httr::GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", httr::authenticate(":", ":", type="ntlm"), httr::write_disk(tf <- tempfile(fileext = ".csv")))
allDat <- read_csv(tf)
allDatDesc <- allDat %>%
dplyr::arrange(countriesAndTerritories, dateRep) %>%
dplyr::mutate(dateRep = lubridate::dmy(dateRep))%>%
dplyr::rename(date = dateRep, new_cases = cases, new_deaths = deaths, country = countriesAndTerritories) %>%
dplyr::select(date, country, new_cases, new_deaths) %>%
dplyr::filter(!country %in% c("CANADA", "Cases_on_an_international_conveyance_Japan"))
# Do analysis
allTogetherCleanA <- allDatDesc %>%
dplyr::group_by(country) %>%
padr::pad() %>%
dplyr::mutate(new_cases = tidyr::replace_na(new_cases, 0),
new_deaths = tidyr::replace_na(new_deaths, 0)) %>%
#What is this doing?
dplyr::group_by(country) %>%
dplyr::mutate(cum_deaths = sum(new_deaths)) %>%
dplyr::filter(cum_deaths > 0) %>%
dplyr::select(-cum_deaths)
httr::GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", httr::authenticate(":", ":", type="ntlm"), httr::write_disk(tf <- tempfile(fileext = ".csv")))
allDat <- read_csv(tf)
httr::GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", httr::authenticate(":", ":", type="ntlm"), httr::write_disk(tf <- tempfile(fileext = ".csv")))
allDat <- read_csv(tf)
# Function to work out correction CFR
scale_cfr_temporal <- function(data_1_in, delay_fun = hospitalisation_to_death_truncated){
case_incidence <- data_1_in$new_cases
death_incidence <- data_1_in$new_deaths
cumulative_known_t <- NULL # cumulative cases with known outcome at time tt
# Sum over cases up to time tt
for(ii in 1:nrow(data_1_in)){
known_i <- 0 # number of cases with known outcome at time ii
for(jj in 0:(ii - 1)){
known_jj <- (case_incidence[ii - jj]*delay_fun(jj))
known_i <- known_i + known_jj
}
cumulative_known_t <- c(cumulative_known_t,known_i) # Tally cumulative known
}
# naive CFR value
b_tt <- sum(death_incidence)/sum(case_incidence)
# corrected CFR estimator
p_tt <- (death_incidence/cumulative_known_t) %>% pmin(.,1)
data.frame(nCFR = b_tt, cCFR = p_tt, total_deaths = sum(death_incidence),
cum_known_t = round(cumulative_known_t), total_cases = sum(case_incidence))
}
httr::GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", httr::authenticate(":", ":", type="ntlm"), httr::write_disk(tf <- tempfile(fileext = ".csv")))
# Load libraries
library(tidyverse)
library(padr)
library(mgcv)
require(gridExtra)
require(ggplot2)
# Set paths
setwd("~/Documents/Studies/Covid19Lancet/CFR_calculation-master/global_estimates/")
if(grepl(Sys.info()["user"], pattern = "^adamkuchars(ki)?$")){setwd("~/Documents/GitHub/CFR_calculation/global_estimates/")}
#source data processing and plotting scripts
source('./scripts/plot_temporal/get_plot_data.R')
source('./scripts/plot_temporal/plot_country.R')
# Set parameters
zmeanHDT <- 13
zsdHDT <- 12.7
zmedianHDT <- 9.1
muHDT <- log(zmedianHDT)
sigmaHDT <- sqrt(2*(log(zmeanHDT) - muHDT))
cCFRBaseline <- 1.38
cCFREstimateRange <- c(1.23, 1.53)
# Hospitalisation to death distribution
hospitalisation_to_death_truncated <- function(x) {
plnorm(x + 1, muHDT, sigmaHDT) - plnorm(x, muHDT, sigmaHDT)
}
# Function to work out correction CFR
scale_cfr_temporal <- function(data_1_in, delay_fun = hospitalisation_to_death_truncated){
case_incidence <- data_1_in$new_cases
death_incidence <- data_1_in$new_deaths
cumulative_known_t <- NULL # cumulative cases with known outcome at time tt
# Sum over cases up to time tt
for(ii in 1:nrow(data_1_in)){
known_i <- 0 # number of cases with known outcome at time ii
for(jj in 0:(ii - 1)){
known_jj <- (case_incidence[ii - jj]*delay_fun(jj))
known_i <- known_i + known_jj
}
cumulative_known_t <- c(cumulative_known_t,known_i) # Tally cumulative known
}
# naive CFR value
b_tt <- sum(death_incidence)/sum(case_incidence)
# corrected CFR estimator
p_tt <- (death_incidence/cumulative_known_t) %>% pmin(.,1)
data.frame(nCFR = b_tt, cCFR = p_tt, total_deaths = sum(death_incidence),
cum_known_t = round(cumulative_known_t), total_cases = sum(case_incidence))
}
httr::GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", httr::authenticate(":", ":", type="ntlm"), httr::write_disk(tf <- tempfile(fileext = ".csv")))
allDat <- read_csv(tf)
allDat
allDatDesc <- allDat %>%
dplyr::arrange(countriesAndTerritories, dateRep) %>%
dplyr::mutate(dateRep = lubridate::dmy(dateRep))%>%
dplyr::rename(date = dateRep, new_cases = cases, new_deaths = deaths, country = countriesAndTerritories) %>%
dplyr::select(date, country, new_cases, new_deaths) %>%
dplyr::filter(!country %in% c("CANADA", "Cases_on_an_international_conveyance_Japan"))
allDatDesc
# Do analysis
allTogetherCleanA <- allDatDesc %>%
dplyr::group_by(country) %>%
padr::pad() %>%
dplyr::mutate(new_cases = tidyr::replace_na(new_cases, 0),
new_deaths = tidyr::replace_na(new_deaths, 0)) %>%
#What is this doing?
dplyr::group_by(country) %>%
dplyr::mutate(cum_deaths = sum(new_deaths)) %>%
dplyr::filter(cum_deaths > 0) %>%
dplyr::select(-cum_deaths)
plot_country_names <- allTogetherCleanA %>%
mutate(death_cum_sum = cumsum(new_deaths)) %>%
filter(death_cum_sum >= 10) %>%
mutate(max_deaths = max(death_cum_sum)) %>%
arrange(-max_deaths) %>%
pull(country) %>%
unique()
cfr_plots <- list()
for (country_name in plot_country_names){
plot_data <- get_plot_data(country_name = country_name)
p <- try(plot_country(plot_data = plot_data), silent = TRUE)
if ('try-error' %in% class(p)){next}
cfr_plots[[country_name]] = p
}
cfr_plot_grid = arrangeGrob(grobs = cfr_plots, ncol = 5)
ggsave('./outputs/cfr_plots/cfr_plot_grid.pdf',
cfr_plot_grid,
width = 8,
height = 10,
units = 'in',
useDingbats = FALSE,
dpi = 400)
p
plot_country_names <- allTogetherCleanA %>%
mutate(death_cum_sum = cumsum(new_deaths)) %>%
filter(death_cum_sum >= 10) %>%
mutate(max_deaths = max(death_cum_sum)) %>%
arrange(-max_deaths) %>%
pull(country) %>%
unique()
cfr_plots <- list()
for (country_name in plot_country_names){
plot_data <- get_plot_data(country_name = country_name)
p <- try(plot_country(plot_data = plot_data), silent = TRUE)
if ('try-error' %in% class(p)){next}
cfr_plots[[country_name]] = p
}
cfr_plot_grid = arrangeGrob(grobs = cfr_plots, ncol = 5)
cfr_plot_grid
plot_data
# Code to estimate reporting
# Set up paths and parameters ---------------------------------------------
# Load libraries
library(tidyverse)
library(padr)
# Set paths
setwd("~/Documents/lshtm/github repos/CFR_calculation/global_estimates/")
if(grepl(Sys.info()["user"], pattern = "^adamkuchars(ki)?$")){setwd("~/Documents/GitHub/CFR_calculation/global_estimates/")}
# Set parameters
zmeanHDT <- 13
zsdHDT <- 12.7
zmedianHDT <- 9.1
muHDT <- log(zmedianHDT)
sigmaHDT <- sqrt(2*(log(zmeanHDT) - muHDT))
cCFRBaseline <- 1.38
cCFREstimateRange <- c(1.23, 1.53)
#cCFRIQRRange <- c(1.3, 1.4)
# Hospitalisation to death distribution
hospitalisation_to_death_truncated <- function(x) {
plnorm(x + 1, muHDT, sigmaHDT) - plnorm(x, muHDT, sigmaHDT)
}
# Define CFR function -----------------------------------------------------
# Function to work out correction CFR
scale_cfr <- function(data_1_in, delay_fun){
case_incidence <- data_1_in$new_cases
death_incidence <- data_1_in$new_deaths
cumulative_known_t <- 0 # cumulative cases with known outcome at time tt
# Sum over cases up to time tt
for(ii in 1:nrow(data_1_in)){
known_i <- 0 # number of cases with known outcome at time ii
for(jj in 0:(ii - 1)){
known_jj <- (case_incidence[ii - jj]*delay_fun(jj))
known_i <- known_i + known_jj
}
cumulative_known_t <- cumulative_known_t + known_i # Tally cumulative known
}
# naive CFR value
b_tt <- sum(death_incidence)/sum(case_incidence)
# corrected CFR estimator
p_tt <- sum(death_incidence)/cumulative_known_t
data.frame(nCFR = b_tt, cCFR = p_tt, total_deaths = sum(death_incidence),
cum_known_t = round(cumulative_known_t), total_cases = sum(case_incidence))
}
# Load data -----------------------------------------------------
httr::GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", httr::authenticate(":", ":", type="ntlm"), httr::write_disk(tf <- tempfile(fileext = ".csv")))
allDat <- read.csv(tf)
allDatDesc <- allDat %>%
dplyr::arrange(countriesAndTerritories, dateRep) %>%
dplyr::mutate(dateRep = lubridate::dmy(dateRep))%>%
dplyr::rename(date = dateRep, new_cases = cases, new_deaths = deaths, country = countriesAndTerritories) %>%
dplyr::select(date, country, new_cases, new_deaths) %>%
dplyr::filter(country != "CANADA",
country != "Cases_on_an_international_conveyance_Japan")
# Do analysis
allTogetherClean2 <- allDatDesc %>%
dplyr::group_by(country) %>%
padr::pad() %>%
dplyr::mutate(new_cases = tidyr::replace_na(new_cases, 0),
new_deaths = tidyr::replace_na(new_deaths, 0)) %>%
dplyr::group_by(country) %>%
dplyr::mutate(cum_deaths = sum(new_deaths)) %>%
dplyr::filter(cum_deaths > 0) %>%
dplyr::select(-cum_deaths) %>%
dplyr::do(scale_cfr(., delay_fun = hospitalisation_to_death_truncated)) %>%
dplyr::filter(cum_known_t > 0 & cum_known_t >= total_deaths)  %>%
dplyr::mutate(nCFR_UQ = binom.test(total_deaths, total_cases)$conf.int[2],
nCFR_LQ = binom.test(total_deaths, total_cases)$conf.int[1],
cCFR_UQ = binom.test(total_deaths, cum_known_t)$conf.int[2],
cCFR_LQ = binom.test(total_deaths, cum_known_t)$conf.int[1],
underreporting_estimate = cCFRBaseline / (100*cCFR),
lower = cCFREstimateRange[1] / (100 * cCFR_UQ),
upper = cCFREstimateRange[2] / (100 * cCFR_LQ),
quantile25 = binom.test(total_deaths, cum_known_t, conf.level = 0.5)$conf.int[1],
quantile75 = binom.test(total_deaths, cum_known_t, conf.level = 0.5)$conf.int[2]
#bottom = cCFRIQRRange[1] / (100 * quantile75),
#top = cCFRIQRRange[2] / (100 * quantile25)
) %>%
dplyr::filter(total_deaths > 10)
#confidence = dplyr::case_when(total_deaths >= 100 ~ "Countries which have reported 100 or more deaths",
#                              total_deaths < 100 && total_deaths > 10  ~ "Countries that have reported fewer than 100 deaths, but more than 10",
#                              total_deaths >= 5 && total_deaths <= 10 ~ "Countries that have reported greater than or equal to 5 deaths") %>%
#
# factor(levels = c("Countries which have reported 100 or more deaths",
#                   "Countries that have reported fewer than 100 deaths, but more than 10",
#                   "Countries that have reported greater than or equal to 5 deaths"))
reportDataFinal <- allTogetherClean2 %>%
dplyr::select(country, total_cases, total_deaths, underreporting_estimate, lower,
upper) %>%
#dplyr::mutate(is.numeric, signif, digits=2)  %>%
dplyr::mutate(underreporting_estimate = ifelse(underreporting_estimate <= 1, underreporting_estimate, 1)) %>%
dplyr::mutate(upper = ifelse(upper <= 1, upper, 1)) %>%
#dplyr::mutate(top = ifelse(top <= 1, top, 1)) %>%
dplyr::mutate(underreporting_estimate = signif(underreporting_estimate, 2)) %>%
dplyr::mutate(lower = signif(lower, 2)) %>%
dplyr::mutate(upper = signif(upper, 2)) %>%
#dplyr::mutate(bottom = signif(bottom, 2)) %>%
#dplyr::mutate(top = signif(top, 2)) %>%
dplyr::ungroup(country) %>%
dplyr::mutate(country = country %>% stringr::str_replace_all("_", " ")) %>%
dplyr::mutate(underreporting_estimate_clean = paste0(underreporting_estimate*100,
"% (",lower*100,"% - ",upper*100,"%)"))
saveRDS(reportDataFinal, "data/reportDataFinal.rds")
reportDataFinal
# Load libraries
library(tidyverse)
library(padr)
# Set paths
setwd("~/Documents/lshtm/github repos/CFR_calculation/global_estimates/")
# Set paths
setwd("~/Documents/Studies/Covid19Lancet/CFR_calculation-master/global_estimates/")
if(grepl(Sys.info()["user"], pattern = "^adamkuchars(ki)?$")){setwd("~/Documents/GitHub/CFR_calculation/global_estimates/")}
# Set parameters
zmeanHDT <- 13
zsdHDT <- 12.7
zmedianHDT <- 9.1
muHDT <- log(zmedianHDT)
sigmaHDT <- sqrt(2*(log(zmeanHDT) - muHDT))
cCFRBaseline <- 1.38
cCFREstimateRange <- c(1.23, 1.53)
# Hospitalisation to death distribution
hospitalisation_to_death_truncated <- function(x) {
plnorm(x + 1, muHDT, sigmaHDT) - plnorm(x, muHDT, sigmaHDT)
}
# Function to work out correction CFR
scale_cfr <- function(data_1_in, delay_fun){
case_incidence <- data_1_in$new_cases
death_incidence <- data_1_in$new_deaths
cumulative_known_t <- 0 # cumulative cases with known outcome at time tt
# Sum over cases up to time tt
for(ii in 1:nrow(data_1_in)){
known_i <- 0 # number of cases with known outcome at time ii
for(jj in 0:(ii - 1)){
known_jj <- (case_incidence[ii - jj]*delay_fun(jj))
known_i <- known_i + known_jj
}
cumulative_known_t <- cumulative_known_t + known_i # Tally cumulative known
}
# naive CFR value
b_tt <- sum(death_incidence)/sum(case_incidence)
# corrected CFR estimator
p_tt <- sum(death_incidence)/cumulative_known_t
data.frame(nCFR = b_tt, cCFR = p_tt, total_deaths = sum(death_incidence),
cum_known_t = round(cumulative_known_t), total_cases = sum(case_incidence))
}
httr::GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", httr::authenticate(":", ":", type="ntlm"), httr::write_disk(tf <- tempfile(fileext = ".csv")))
allDat <- read.csv(tf)
allDat
allDatDesc <- allDat %>%
dplyr::arrange(countriesAndTerritories, dateRep) %>%
dplyr::mutate(dateRep = lubridate::dmy(dateRep))%>%
dplyr::rename(date = dateRep, new_cases = cases, new_deaths = deaths, country = countriesAndTerritories) %>%
dplyr::select(date, country, new_cases, new_deaths) %>%
dplyr::filter(country != "CANADA",
country != "Cases_on_an_international_conveyance_Japan")
# Do analysis
allTogetherClean2 <- allDatDesc %>%
dplyr::group_by(country) %>%
padr::pad() %>%
dplyr::mutate(new_cases = tidyr::replace_na(new_cases, 0),
new_deaths = tidyr::replace_na(new_deaths, 0)) %>%
dplyr::group_by(country) %>%
dplyr::mutate(cum_deaths = sum(new_deaths)) %>%
dplyr::filter(cum_deaths > 0) %>%
dplyr::select(-cum_deaths) %>%
dplyr::do(scale_cfr(., delay_fun = hospitalisation_to_death_truncated)) %>%
dplyr::filter(cum_known_t > 0 & cum_known_t >= total_deaths)  %>%
dplyr::mutate(nCFR_UQ = binom.test(total_deaths, total_cases)$conf.int[2],
nCFR_LQ = binom.test(total_deaths, total_cases)$conf.int[1],
cCFR_UQ = binom.test(total_deaths, cum_known_t)$conf.int[2],
cCFR_LQ = binom.test(total_deaths, cum_known_t)$conf.int[1],
underreporting_estimate = cCFRBaseline / (100*cCFR),
lower = cCFREstimateRange[1] / (100 * cCFR_UQ),
upper = cCFREstimateRange[2] / (100 * cCFR_LQ),
quantile25 = binom.test(total_deaths, cum_known_t, conf.level = 0.5)$conf.int[1],
quantile75 = binom.test(total_deaths, cum_known_t, conf.level = 0.5)$conf.int[2]
#bottom = cCFRIQRRange[1] / (100 * quantile75),
#top = cCFRIQRRange[2] / (100 * quantile25)
) %>%
dplyr::filter(total_deaths > 10)
reportDataFinal <- allTogetherClean2 %>%
dplyr::select(country, total_cases, total_deaths, underreporting_estimate, lower,
upper) %>%
#dplyr::mutate(is.numeric, signif, digits=2)  %>%
dplyr::mutate(underreporting_estimate = ifelse(underreporting_estimate <= 1, underreporting_estimate, 1)) %>%
dplyr::mutate(upper = ifelse(upper <= 1, upper, 1)) %>%
#dplyr::mutate(top = ifelse(top <= 1, top, 1)) %>%
dplyr::mutate(underreporting_estimate = signif(underreporting_estimate, 2)) %>%
dplyr::mutate(lower = signif(lower, 2)) %>%
dplyr::mutate(upper = signif(upper, 2)) %>%
#dplyr::mutate(bottom = signif(bottom, 2)) %>%
#dplyr::mutate(top = signif(top, 2)) %>%
dplyr::ungroup(country) %>%
dplyr::mutate(country = country %>% stringr::str_replace_all("_", " ")) %>%
dplyr::mutate(underreporting_estimate_clean = paste0(underreporting_estimate*100,
"% (",lower*100,"% - ",upper*100,"%)"))
reportDataFinal
reportDataFinal[reportDataFinal$country == "Turkey",]
shiny::runApp('~/Documents/GitHub/BV')
runApp('~/Documents/GitHub/Covid2019Turkey')
