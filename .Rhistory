mergedData$popAdjustedRecovered = round(1000000/(mergedData$Population/mergedData$MaxRecovered),0)
}
mergedData = mergedData[c(1:7,19:21,9:13,15:18)]
newWorldDataFull = dplyr::filter(newWorldDataFull, MaxConfirmed >= filter)
countries = as.character(newWorldDataFull$Country)
selectedCountries = dplyr::filter(dataCountries, dataCountries$MaxConfirmed>10000)
countriesDisplayed = as.character(selectedCountries$Country)
data = list(newWorldDataFull, countries, dataCountries, mergedData, countriesDisplayed)
data = data[[1]][c("Country", "Deaths", "Days")]
head(data)
splitData = split(data, data$Country)
meanDailyDeathsCountries = list()
for(counts in 1:length(splitData)){
tmp = splitData[[counts]]
if(nrow(tmp) >= 14){
indx = which(splitData[[counts]]$Days == tmp$Days[1])
splitData[[counts]] = splitData[[counts]][indx:nrow(splitData[[counts]]),]
splitData[[counts]]$Days = 0:(nrow(data.frame(splitData[[counts]]))-1)
splitData[[counts]]$NewDeaths = NA
for(k in 2:nrow(splitData[[counts]])){
splitData[[counts]]$NewDeaths[k] = splitData[[counts]]$Deaths[k]-splitData[[counts]]$Deaths[k-1]
}
splitData[[counts]] = splitData[[counts]][complete.cases(splitData[[counts]]),]
meanDailyDeaths = list()
weeklyDeaths = list()
for(i in 1:(nrow(splitData[[counts]])-6)){
j=i+6
meanDailyDeaths[[i]] = mean(splitData[[counts]][i:j, "NewDeaths"], na.rm = TRUE)
weeklyDeaths[[i]] = sum(splitData[[counts]][i:j, "NewDeaths"], na.rm = TRUE)
}
meanDailyDeaths =  do.call(rbind.data.frame, meanDailyDeaths)
weeklyDeaths =  do.call(rbind.data.frame, weeklyDeaths)
colnames(meanDailyDeaths) = "Mean_Daily_New_Deaths"
colnames(weeklyDeaths) = "Weekly_New_Deaths"
dailyDeathsMean = cbind.data.frame(Country = rep(as.character(splitData[[counts]]$Country[1]),nrow(meanDailyDeaths)), Days =0:(nrow(meanDailyDeaths)-1), meanDailyDeaths,weeklyDeaths)
}else{
dailyDeathsMean = NULL
}
meanDailyDeathsCountries[[counts]] = dailyDeathsMean
}
newWeeklyData = do.call(rbind.data.frame, meanDailyDeathsCountries)
comparedCountries = input$countries
newWeeklyData2 = newWeeklyData[as.character(newWeeklyData$Country) %in% comparedCountries,]
newWeeklyData2$Country = as.character(newWeeklyData2$Country)
newWeeklyData2 = newWeeklyData[as.character(newWeeklyData$Country) %in% comparedCountries,]
comparedCountries
comparedCountries = c("Turkey", "Italy")
newWeeklyData2 = newWeeklyData[as.character(newWeeklyData$Country) %in% comparedCountries,]
newWeeklyData2$Country = as.character(newWeeklyData2$Country)
newWeeklyData2
splitNewWeeklyData = split(newWeeklyData2, newWeeklyData2$Country)
weeklyNewData = list()
for(compareCount in 1:length(splitNewWeeklyData)){
tmp = splitNewWeeklyData[[compareCount]]
tmp2 = dplyr::filter(tmp, tmp$Weekly_New_Deaths >= input$weeklyDeath)
indx = which(splitNewWeeklyData[[compareCount]]$Days == tmp2$Days[1])-1
splitNewWeeklyData[[compareCount]] = splitNewWeeklyData[[compareCount]][indx:nrow(splitNewWeeklyData[[compareCount]]),]
splitNewWeeklyData[[compareCount]]$Days = 0:(nrow(data.frame(splitNewWeeklyData[[compareCount]]))-1)
weeklyNewData[[compareCount]] = splitNewWeeklyData[[compareCount]]
}
firstCase
firstCase=20
weeklyDeath=20
firstCase=1
data = data[[1]][c("Country", "Deaths", "Days")]
splitData = split(data, data$Country)
meanDailyDeathsCountries = list()
for(counts in 1:length(splitData)){
tmp = splitData[[counts]]
if(nrow(tmp) >= 14){
indx = which(splitData[[counts]]$Days == tmp$Days[1])
splitData[[counts]] = splitData[[counts]][indx:nrow(splitData[[counts]]),]
splitData[[counts]]$Days = 0:(nrow(data.frame(splitData[[counts]]))-1)
splitData[[counts]]$NewDeaths = NA
for(k in 2:nrow(splitData[[counts]])){
splitData[[counts]]$NewDeaths[k] = splitData[[counts]]$Deaths[k]-splitData[[counts]]$Deaths[k-1]
}
splitData[[counts]] = splitData[[counts]][complete.cases(splitData[[counts]]),]
meanDailyDeaths = list()
weeklyDeaths = list()
for(i in 1:(nrow(splitData[[counts]])-6)){
j=i+6
meanDailyDeaths[[i]] = mean(splitData[[counts]][i:j, "NewDeaths"], na.rm = TRUE)
weeklyDeaths[[i]] = sum(splitData[[counts]][i:j, "NewDeaths"], na.rm = TRUE)
}
meanDailyDeaths =  do.call(rbind.data.frame, meanDailyDeaths)
weeklyDeaths =  do.call(rbind.data.frame, weeklyDeaths)
colnames(meanDailyDeaths) = "Mean_Daily_New_Deaths"
colnames(weeklyDeaths) = "Weekly_New_Deaths"
dailyDeathsMean = cbind.data.frame(Country = rep(as.character(splitData[[counts]]$Country[1]),nrow(meanDailyDeaths)), Days =0:(nrow(meanDailyDeaths)-1), meanDailyDeaths,weeklyDeaths)
}else{
dailyDeathsMean = NULL
}
meanDailyDeathsCountries[[counts]] = dailyDeathsMean
}
newWeeklyData = do.call(rbind.data.frame, meanDailyDeathsCountries)
comparedCountries = c("Turkey", "Italy")
newWeeklyData2 = newWeeklyData[as.character(newWeeklyData$Country) %in% comparedCountries,]
newWeeklyData2$Country = as.character(newWeeklyData2$Country)
splitNewWeeklyData = split(newWeeklyData2, newWeeklyData2$Country)
weeklyNewData = list()
for(compareCount in 1:length(splitNewWeeklyData)){
tmp = splitNewWeeklyData[[compareCount]]
tmp2 = dplyr::filter(tmp, tmp$Weekly_New_Deaths >= input$weeklyDeath)
indx = which(splitNewWeeklyData[[compareCount]]$Days == tmp2$Days[1])-1
splitNewWeeklyData[[compareCount]] = splitNewWeeklyData[[compareCount]][indx:nrow(splitNewWeeklyData[[compareCount]]),]
splitNewWeeklyData[[compareCount]]$Days = 0:(nrow(data.frame(splitNewWeeklyData[[compareCount]]))-1)
weeklyNewData[[compareCount]] = splitNewWeeklyData[[compareCount]]
}
weeklyDeath
data = data[[1]][c("Country", "Deaths", "Days")]
splitData = split(data, data$Country)
meanDailyDeathsCountries = list()
for(counts in 1:length(splitData)){
tmp = splitData[[counts]]
if(nrow(tmp) >= 14){
indx = which(splitData[[counts]]$Days == tmp$Days[1])
splitData[[counts]] = splitData[[counts]][indx:nrow(splitData[[counts]]),]
splitData[[counts]]$Days = 0:(nrow(data.frame(splitData[[counts]]))-1)
splitData[[counts]]$NewDeaths = NA
for(k in 2:nrow(splitData[[counts]])){
splitData[[counts]]$NewDeaths[k] = splitData[[counts]]$Deaths[k]-splitData[[counts]]$Deaths[k-1]
}
splitData[[counts]] = splitData[[counts]][complete.cases(splitData[[counts]]),]
meanDailyDeaths = list()
weeklyDeaths = list()
for(i in 1:(nrow(splitData[[counts]])-6)){
j=i+6
meanDailyDeaths[[i]] = mean(splitData[[counts]][i:j, "NewDeaths"], na.rm = TRUE)
weeklyDeaths[[i]] = sum(splitData[[counts]][i:j, "NewDeaths"], na.rm = TRUE)
}
meanDailyDeaths =  do.call(rbind.data.frame, meanDailyDeaths)
weeklyDeaths =  do.call(rbind.data.frame, weeklyDeaths)
colnames(meanDailyDeaths) = "Mean_Daily_New_Deaths"
colnames(weeklyDeaths) = "Weekly_New_Deaths"
dailyDeathsMean = cbind.data.frame(Country = rep(as.character(splitData[[counts]]$Country[1]),nrow(meanDailyDeaths)), Days =0:(nrow(meanDailyDeaths)-1), meanDailyDeaths,weeklyDeaths)
}else{
dailyDeathsMean = NULL
}
meanDailyDeathsCountries[[counts]] = dailyDeathsMean
}
newWeeklyData = do.call(rbind.data.frame, meanDailyDeathsCountries)
comparedCountries = c("Turkey", "Italy")
newWeeklyData2 = newWeeklyData[as.character(newWeeklyData$Country) %in% comparedCountries,]
newWeeklyData2$Country = as.character(newWeeklyData2$Country)
splitNewWeeklyData = split(newWeeklyData2, newWeeklyData2$Country)
weeklyNewData = list()
for(compareCount in 1:length(splitNewWeeklyData)){
tmp = splitNewWeeklyData[[compareCount]]
tmp2 = dplyr::filter(tmp, tmp$Weekly_New_Deaths >= weeklyDeath)
indx = which(splitNewWeeklyData[[compareCount]]$Days == tmp2$Days[1])-1
splitNewWeeklyData[[compareCount]] = splitNewWeeklyData[[compareCount]][indx:nrow(splitNewWeeklyData[[compareCount]]),]
splitNewWeeklyData[[compareCount]]$Days = 0:(nrow(data.frame(splitNewWeeklyData[[compareCount]]))-1)
weeklyNewData[[compareCount]] = splitNewWeeklyData[[compareCount]]
}
newWeeklyData3 = do.call(rbind.data.frame, weeklyNewData)
if(firstCase > 0){
xlabel = paste0("Haftalık ",weeklyDeath," Yeni Ölüm Tespit Edildikten Sonra Geçen Gün")
}else{
xlabel = "Gün"
}
if(logTransform){
breakPoints = c(weeklyDeath,weeklyDeath+weeklyDeath, weeklyDeath+weeklyDeath*4,
weeklyDeath+weeklyDeath*9,weeklyDeath+weeklyDeath*19,weeklyDeath+weeklyDeath*49
,weeklyDeath+weeklyDeath*99,weeklyDeath+weeklyDeath*199,weeklyDeath+weeklyDeath*499
,weeklyDeath+weeklyDeath*999)
}else{
breakPoints = waiver()
}
logTransform=T
data = data[[1]][c("Country", "Deaths", "Days")]
splitData = split(data, data$Country)
meanDailyDeathsCountries = list()
for(counts in 1:length(splitData)){
tmp = splitData[[counts]]
if(nrow(tmp) >= 14){
indx = which(splitData[[counts]]$Days == tmp$Days[1])
splitData[[counts]] = splitData[[counts]][indx:nrow(splitData[[counts]]),]
splitData[[counts]]$Days = 0:(nrow(data.frame(splitData[[counts]]))-1)
splitData[[counts]]$NewDeaths = NA
for(k in 2:nrow(splitData[[counts]])){
splitData[[counts]]$NewDeaths[k] = splitData[[counts]]$Deaths[k]-splitData[[counts]]$Deaths[k-1]
}
splitData[[counts]] = splitData[[counts]][complete.cases(splitData[[counts]]),]
meanDailyDeaths = list()
weeklyDeaths = list()
for(i in 1:(nrow(splitData[[counts]])-6)){
j=i+6
meanDailyDeaths[[i]] = mean(splitData[[counts]][i:j, "NewDeaths"], na.rm = TRUE)
weeklyDeaths[[i]] = sum(splitData[[counts]][i:j, "NewDeaths"], na.rm = TRUE)
}
meanDailyDeaths =  do.call(rbind.data.frame, meanDailyDeaths)
weeklyDeaths =  do.call(rbind.data.frame, weeklyDeaths)
colnames(meanDailyDeaths) = "Mean_Daily_New_Deaths"
colnames(weeklyDeaths) = "Weekly_New_Deaths"
dailyDeathsMean = cbind.data.frame(Country = rep(as.character(splitData[[counts]]$Country[1]),nrow(meanDailyDeaths)), Days =0:(nrow(meanDailyDeaths)-1), meanDailyDeaths,weeklyDeaths)
}else{
dailyDeathsMean = NULL
}
meanDailyDeathsCountries[[counts]] = dailyDeathsMean
}
newWeeklyData = do.call(rbind.data.frame, meanDailyDeathsCountries)
comparedCountries = c("Turkey", "Italy")
newWeeklyData2 = newWeeklyData[as.character(newWeeklyData$Country) %in% comparedCountries,]
newWeeklyData2$Country = as.character(newWeeklyData2$Country)
splitNewWeeklyData = split(newWeeklyData2, newWeeklyData2$Country)
weeklyNewData = list()
for(compareCount in 1:length(splitNewWeeklyData)){
tmp = splitNewWeeklyData[[compareCount]]
tmp2 = dplyr::filter(tmp, tmp$Weekly_New_Deaths >= weeklyDeath)
indx = which(splitNewWeeklyData[[compareCount]]$Days == tmp2$Days[1])-1
splitNewWeeklyData[[compareCount]] = splitNewWeeklyData[[compareCount]][indx:nrow(splitNewWeeklyData[[compareCount]]),]
splitNewWeeklyData[[compareCount]]$Days = 0:(nrow(data.frame(splitNewWeeklyData[[compareCount]]))-1)
weeklyNewData[[compareCount]] = splitNewWeeklyData[[compareCount]]
}
newWeeklyData3 = do.call(rbind.data.frame, weeklyNewData)
if(firstCase > 0){
xlabel = paste0("Haftalık ",weeklyDeath," Yeni Ölüm Tespit Edildikten Sonra Geçen Gün")
}else{
xlabel = "Gün"
}
if(logTransform){
breakPoints = c(weeklyDeath,weeklyDeath+weeklyDeath, weeklyDeath+weeklyDeath*4,
weeklyDeath+weeklyDeath*9,weeklyDeath+weeklyDeath*19,weeklyDeath+weeklyDeath*49
,weeklyDeath+weeklyDeath*99,weeklyDeath+weeklyDeath*199,weeklyDeath+weeklyDeath*499
,weeklyDeath+weeklyDeath*999)
}else{
breakPoints = waiver()
}
transform = ifelse(logTransform,"log", "identity")
if(highlightCountry){
ggplot(data = newWeeklyData3, aes(x=Days, y=Mean_Daily_New_Deaths)) + geom_line(aes(colour=Country),size = 1) +
geom_point(aes(colour=Country), size=2) + ylab("Haftalık Ortalama Yeni Ölüm") + xlab(xlabel)+
scale_colour_discrete("Ülke")+ ggtitle("Ülkelerin Haftalık Ortalama Yeni Ölüm Değişimi")+
theme(text = element_text(size=14),legend.title=element_blank())+
theme(legend.position="bottom") + scale_y_continuous(trans = transform, breaks = breakPoints)+
gghighlight(newWeeklyData3$Country == highlightCountries, keep_scales = TRUE, use_direct_label = TRUE)
}else{
ggplot(data = newWeeklyData3, aes(x=Days, y=Mean_Daily_New_Deaths)) + geom_line(aes(colour=Country),size = 1) +
geom_point(aes(colour=Country), size=2) + ylab("Haftalık Ortalama Yeni Ölüm") + xlab(xlabel)+
scale_colour_discrete("Ülke")+ ggtitle("Ülkelerin Haftalık Ortalama Yeni Ölüm Değişimi")+
theme(text = element_text(size=14),legend.title=element_blank())+
theme(legend.position="bottom") + scale_y_continuous(trans = transform, breaks = breakPoints)
}
highlightCountry=T
if(highlightCountry){
ggplot(data = newWeeklyData3, aes(x=Days, y=Mean_Daily_New_Deaths)) + geom_line(aes(colour=Country),size = 1) +
geom_point(aes(colour=Country), size=2) + ylab("Haftalık Ortalama Yeni Ölüm") + xlab(xlabel)+
scale_colour_discrete("Ülke")+ ggtitle("Ülkelerin Haftalık Ortalama Yeni Ölüm Değişimi")+
theme(text = element_text(size=14),legend.title=element_blank())+
theme(legend.position="bottom") + scale_y_continuous(trans = transform, breaks = breakPoints)+
gghighlight(newWeeklyData3$Country == "Turkey", keep_scales = TRUE, use_direct_label = TRUE)
}else{
ggplot(data = newWeeklyData3, aes(x=Days, y=Mean_Daily_New_Deaths)) + geom_line(aes(colour=Country),size = 1) +
geom_point(aes(colour=Country), size=2) + ylab("Haftalık Ortalama Yeni Ölüm") + xlab(xlabel)+
scale_colour_discrete("Ülke")+ ggtitle("Ülkelerin Haftalık Ortalama Yeni Ölüm Değişimi")+
theme(text = element_text(size=14),legend.title=element_blank())+
theme(legend.position="bottom") + scale_y_continuous(trans = transform, breaks = breakPoints)
}
data = data[[1]][c("Country", "Deaths", "Days")]
splitData = split(data, data$Country)
data = data[[1]][c("Country", "Deaths", "Days")]
confirmedURL = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
confirmed = read.csv(confirmedURL, header = TRUE, check.names = FALSE)
confirmedData = confirmed %>%
gather(Date, Confirmed, -c("Province/State", "Country/Region","Lat", "Long"))
confirmedCanada = confirmedData[confirmedData$`Country/Region` == "Canada",]
##################################
deathsURL = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"
deaths = read.csv(deathsURL, header = TRUE, check.names = FALSE)
deathsData = deaths %>%
gather(Date, Deaths, -c("Province/State", "Country/Region","Lat", "Long"))
deathsCanada = deathsData[deathsData$`Country/Region` == "Canada",]
##################################
recoveredURL = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"
recovered = read.csv(recoveredURL, header = TRUE, check.names = FALSE)
head(recovered)
recoveredData = recovered %>%
gather(Date, Recovered, -c("Province/State", "Country/Region","Lat", "Long"))
recoveredCanada = recoveredData[recoveredData$`Country/Region` == "Canada",]
##########################
dataCanada = plyr::join_all(list(confirmedCanada,deathsCanada), by=c("Province/State","Country/Region",
"Lat", "Long", "Date"), type='left')
d = nrow(dataCanada)
pData = dataCanada
pData$Date = as.character(pData$Date)
pData$MaxConfirmed = max(pData$Confirmed, na.rm = TRUE)
pData$MaxDeaths = max(pData$Deaths, na.rm = TRUE)
colnames(pData)[1:2] = c("Province.State", "Country.Region")
orderedData = setDT(pData)[order(Country.Region, Confirmed), .SD, .(Date)]
orderedDataList = list()
splitOrderedData = split(orderedData, orderedData$Date)
for(j in 1:length(splitOrderedData)){
orderedDataList[[j]] = cbind.data.frame(Province.State = NA,
Country.Region = unique(splitOrderedData[[j]]$Country.Region),
Lat = unique(splitOrderedData[[j]]$Lat)[1],
Long = unique(splitOrderedData[[j]]$Long)[1],
Date = unique(splitOrderedData[[j]]$Date),
Confirmed = sum(splitOrderedData[[j]]$Confirmed, na.rm = TRUE),
Recovered = sum(splitOrderedData[[j]]$Recovered, na.rm = TRUE),
Deaths = sum(splitOrderedData[[j]]$Deaths, na.rm = TRUE),
MaxConfirmed = j,
MaxDeaths = j,
Days = j
)[1,]
}
tmpData = rbindlist(orderedDataList)
tmpData$MaxConfirmed = max(tmpData$Confirmed, na.rm = TRUE)
tmpData$MaxDeaths = max(tmpData$Deaths, na.rm = TRUE)
tmpData$MaxRecovered = max(recoveredCanada$Recovered, na.rm = TRUE)
tmpCanada=tmpData[order(as.Date(tmpData$Date, format="%m/%d/%Y")),]
tmpCanada$Recovered = recoveredCanada$Recovered
names(tmpCanada)[2] = "Country"
tmpCanada = tmpCanada[,c("Country","Lat", "Long", "Date", "Confirmed", "Deaths", "Recovered", "MaxConfirmed",
"MaxRecovered", "MaxDeaths", "Days")]
#############################################
# dataWorld = plyr::join_all(list(confirmedData,deathsData,recoveredData), type='left')
dataWorld = Reduce(function(x, y) merge(x, y, all=TRUE), list(confirmedData,deathsData,recoveredData))
colnames(dataWorld)[1:2] = c("Province.State","Country.Region")
head(dataWorld)
dataWorld$Province.State = as.character(dataWorld$Province.State)
dataWorld$Province.State = noquote(dataWorld$Province.State)
head(dataWorld)
splitDataWorld = split(dataWorld, dataWorld$Country.Region)
countryNanmes = names(splitDataWorld)
newWorldData = list()
for(i in 1:length(countryNanmes)){
print(i)
c = countryNanmes[i]
d = nrow(splitDataWorld[[c]])
pData = splitDataWorld[[c]]
pData$Date = as.character(pData$Date)
pData$MaxConfirmed = max(pData$Confirmed, na.rm = TRUE)
pData$MaxRecovered = max(pData$Recovered, na.rm = TRUE)
pData$MaxDeaths = max(pData$Deaths, na.rm = TRUE)
pData2 = pData[pData$Province.State =="",]
if(nrow(pData2) > 1){
pData = pData2
}
if((length(pData$Province.State) > length(unique(dataWorld$Date)))  && c != "Turkey"){
orderedData = setDT(pData)[order(Country.Region, Confirmed), .SD, .(Date)]
orderedDataList = list()
splitOrderedData = split(orderedData, orderedData$Date)
for(j in 1:length(splitOrderedData)){
orderedDataList[[j]] = cbind.data.frame(Province.State = NA,
Country.Region = unique(splitOrderedData[[j]]$Country.Region),
Lat = unique(splitOrderedData[[j]]$Lat)[1],
Long = unique(splitOrderedData[[j]]$Long)[1],
Date = unique(splitOrderedData[[j]]$Date),
Confirmed = sum(splitOrderedData[[j]]$Confirmed, na.rm = TRUE),
Recovered = sum(splitOrderedData[[j]]$Recovered, na.rm = TRUE),
Deaths = sum(splitOrderedData[[j]]$Deaths, na.rm = TRUE),
MaxConfirmed = j,
MaxRecovered = j,
MaxDeaths = j,
Days = j
)[1,]
}
tmpData = rbindlist(orderedDataList)
tmpData$MaxConfirmed = max(tmpData$Confirmed, na.rm = TRUE)
tmpData$MaxRecovered = max(tmpData$Recovered, na.rm = TRUE)
tmpData$MaxDeaths = max(tmpData$Deaths, na.rm = TRUE)
tmpData=tmpData[order(as.Date(tmpData$Date, format="%m/%d/%Y")),]
if(c == "China"){
earlyChina = cbind.data.frame(Province.State = c(NA,NA,NA,NA),
Country.Region = c("China","China","China","China"),
Lat = c(37.8099,37.8099,37.8099,37.8099),
Long = c(101.0583,101.0583,101.0583,101.0583),
Date = as.factor(c("1/18/20","1/19/20","1/20/20","1/21/20")),
Confirmed = c(80, 216,235,386),
Recovered = c(0,0,0,0),
Deaths =  c(0,0,0,6),
MaxConfirmed = c(max(tmpData$Confirmed, na.rm = TRUE),max(tmpData$Confirmed, na.rm = TRUE),max(tmpData$Confirmed, na.rm = TRUE),max(tmpData$Confirmed, na.rm = TRUE)),
MaxRecovered = c(max(tmpData$Recovered, na.rm = TRUE),max(tmpData$Recovered, na.rm = TRUE),max(tmpData$Recovered, na.rm = TRUE),max(tmpData$Recovered, na.rm = TRUE)),
MaxDeaths = c(max(tmpData$Deaths, na.rm = TRUE),max(tmpData$Deaths, na.rm = TRUE),max(tmpData$Deaths, na.rm = TRUE),max(tmpData$Deaths, na.rm = TRUE)),
Days = c(1,1,1,1))
tmpData = rbind.data.frame(earlyChina, tmpData)
}
newWorldData[[i]] = tmpData
}else{
pData$Province.State = NA
pData$Days = seq(1, length(unique(pData$Date)), 1)
pData=pData[order(as.Date(pData$Date, format="%m/%d/%Y")),]
if(c == "Turkey"){
insertRow <- function(existingDF, newrow, r) {
existingDF[seq(r+1,nrow(existingDF)+1),] <- existingDF[seq(r,nrow(existingDF)),]
existingDF[r,] <- newrow
existingDF
}
missingTurkey = cbind.data.frame( Date = as.factor("3/21/20"),
Country.Region = c("Turkey"),
Province.State = c(NA),
Lat = c(38.9637),
Long = c(35.2433),
Confirmed = c(947),
Recovered = c(0),
Deaths =  c(21),
MaxConfirmed = max(pData$Confirmed, na.rm = TRUE),
MaxRecovered = max(pData$Recovered, na.rm = TRUE),
MaxDeaths = max(pData$Deaths, na.rm = TRUE),
Days = c(0))
missingTurkey$Date = as.character(missingTurkey$Date)
missingTurkey = missingTurkey[c("Province.State","Country.Region", "Lat","Long", "Date", "Confirmed", "Deaths", "Recovered", "MaxConfirmed",
"MaxRecovered", "MaxDeaths")]
pData = insertRow(pData, missingTurkey, r = nrow(pData[pData$Confirmed <= 1236,]))
}
newWorldData[[i]] = pData
}
}
newWorldDataFull = rbindlist(newWorldData, use.names = TRUE, fill = TRUE)[,-"Province.State"]
colnames(newWorldDataFull)[1] = "Country"
newWorldDataFull$Recovered[is.na(newWorldDataFull$Recovered)] <- 0
head(newWorldDataFull)
newWorldDataFull = newWorldDataFull[-which(newWorldDataFull$Country == "Canada"),]
newWorldDataFull = rbind.data.frame(newWorldDataFull, tmpCanada)
splitData = split(newWorldDataFull,newWorldDataFull$Country)
# splitDataList = list()
for(counts in 1:length(splitData)){
splitData[[counts]]$NewCases = NA
splitData[[counts]]$NewDeaths = NA
splitData[[counts]]$NewRecovered = NA
for(k in 2:nrow(splitData[[counts]])){
splitData[[counts]]$NewCases[k] = splitData[[counts]]$Confirmed[k]-splitData[[counts]]$Confirmed[k-1]
splitData[[counts]]$NewDeaths[k] = splitData[[counts]]$Deaths[k]-splitData[[counts]]$Deaths[k-1]
splitData[[counts]]$NewRecovered[k] = splitData[[counts]]$Recovered[k]-splitData[[counts]]$Recovered[k-1]
}
}
newWorldDataFull = do.call(rbind.data.frame, splitData)
colnames(newWorldDataFull)[1] = "Country"
dataCountries = newWorldDataFull[,c("Country", "MaxConfirmed", "MaxDeaths", "MaxRecovered", "NewCases", "NewDeaths", "NewRecovered")]
splitData = split(dataCountries,dataCountries$Country)
# splitDataList = list()
for(counts in 1:length(splitData)){
splitData[[counts]] = splitData[[counts]][nrow(splitData[[counts]]),]
}
dataCountries = do.call(rbind.data.frame, splitData)
dataCountries[dataCountries$NewRecovered<0,"NewRecovered"] = NA
dataCountries[dataCountries$NewCases<0,"NewCases"] = NA
dataCountries[dataCountries$NewDeaths<0,"NewDeaths"] = NA
dataCountries = dataCountries[!duplicated(dataCountries), ]
dataCountries$Country = as.character(dataCountries$Country)
population = TRUE
if(population){
population <- read.table("www/data/population.txt", sep="\t", header=TRUE, comment.char="#",
na.strings=".", stringsAsFactors=FALSE,
quote="", fill=FALSE)
population$Country = as.character(population$Country)
population$Country[population$Country=="United States"] = "US"
population$Country[population$Country=="Taiwan"] = "Taiwan*"
population$Country[population$Country=="South Korea"] = "Korea, South"
mergedData <- left_join(dataCountries, population, by = c("Country" ))
mergedData=mergedData[complete.cases(mergedData),]
mergedData$popAdjustedCase = round(1000000/(mergedData$Population/mergedData$MaxConfirmed),0)
mergedData$popAdjustedDeaths = round(1000000/(mergedData$Population/mergedData$MaxDeaths),0)
mergedData$popAdjustedRecovered = round(1000000/(mergedData$Population/mergedData$MaxRecovered),0)
}
mergedData = mergedData[c(1:7,19:21,9:13,15:18)]
newWorldDataFull = dplyr::filter(newWorldDataFull, MaxConfirmed >= filter)
countries = as.character(newWorldDataFull$Country)
selectedCountries = dplyr::filter(dataCountries, dataCountries$MaxConfirmed>10000)
countriesDisplayed = as.character(selectedCountries$Country)
data = list(newWorldDataFull, countries, dataCountries, mergedData, countriesDisplayed)
data = data[[1]][c("Country", "Deaths", "Days")]
data
splitData = split(data, data$Country)
meanDailyDeathsCountries = list()
for(counts in 1:length(splitData)){
tmp = splitData[[counts]]
if(nrow(tmp) >= 14){
indx = which(splitData[[counts]]$Days == tmp$Days[1])
splitData[[counts]] = splitData[[counts]][indx:nrow(splitData[[counts]]),]
splitData[[counts]]$Days = 0:(nrow(data.frame(splitData[[counts]]))-1)
splitData[[counts]]$NewDeaths = NA
for(k in 2:nrow(splitData[[counts]])){
splitData[[counts]]$NewDeaths[k] = splitData[[counts]]$Deaths[k]-splitData[[counts]]$Deaths[k-1]
}
splitData[[counts]] = splitData[[counts]][complete.cases(splitData[[counts]]),]
meanDailyDeaths = list()
weeklyDeaths = list()
for(i in 1:(nrow(splitData[[counts]])-6)){
j=i+6
meanDailyDeaths[[i]] = mean(splitData[[counts]][i:j, "NewDeaths"], na.rm = TRUE)
weeklyDeaths[[i]] = sum(splitData[[counts]][i:j, "NewDeaths"], na.rm = TRUE)
}
meanDailyDeaths =  do.call(rbind.data.frame, meanDailyDeaths)
weeklyDeaths =  do.call(rbind.data.frame, weeklyDeaths)
colnames(meanDailyDeaths) = "Mean_Daily_New_Deaths"
colnames(weeklyDeaths) = "Weekly_New_Deaths"
dailyDeathsMean = cbind.data.frame(Country = rep(as.character(splitData[[counts]]$Country[1]),nrow(meanDailyDeaths)), Days =0:(nrow(meanDailyDeaths)-1), meanDailyDeaths,weeklyDeaths)
}else{
dailyDeathsMean = NULL
}
meanDailyDeathsCountries[[counts]] = dailyDeathsMean
}
runApp()
cov(plotData$Test_million_population, plotData$Positive_million_population)
cov(plotData$Test_million_population, plotData$Positive_million_population)
plot(plotData$Test_million_population, plotData$Positive_million_population)
lm(plotData$Test_million_population~ plotData$Positive_million_population)
summary(lm(plotData$Test_million_population~ plotData$Positive_million_population))
sqrt(0.4329)
cov(plotData$Test_million_population~ plotData$Positive_million_population)
cov(plotData$Test_million_population, plotData$Positive_million_population)
summary(lm(plotData$Positive_million_population,plotData$Test_million_population))
summary(lm(plotData$Positive_million_population~plotData$Test_million_population))
cov(plotData$Positive_million_population,plotData$Test_million_population)
cor(plotData$Positive_million_population,plotData$Test_million_population)
sqrt)
sqrt(0.4329)
0.6579506*0.6579506
runApp()
rsconnect::deployApp("~/Documents/GitHub/Covid2019Turkey/")
